<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JsonSchema.Net.Data</name>
    </assembly>
    <members>
        <member name="T:Json.Schema.Data.DataKeyword">
            <summary>
            Represents the `data` keyword.
            </summary>
        </member>
        <member name="F:Json.Schema.Data.DataKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Data.DataKeyword.Fetch">
            <summary>
            Gets or sets a method to download external references.
            </summary>
            <remarks>
            The default method simply attempts to download the resource.  There is no
            caching involved.
            </remarks>
        </member>
        <member name="P:Json.Schema.Data.DataKeyword.ExternalDataRegistry">
             <summary>
             Provides a registry for known external data sources.
             </summary>
             <remarks>
             This property stores full JSON documents retrievable by URI.  If the desired
             value exists as a sub-value of a document, a JSON Pointer URI fragment identifier
             should be used in the `data` keyword do identify the exact value location.
            
             This registry will be checked before attempting to fetch the data.
             </remarks>
        </member>
        <member name="P:Json.Schema.Data.DataKeyword.References">
            <summary>
            The collection of keywords and references.
            </summary>
        </member>
        <member name="M:Json.Schema.Data.DataKeyword.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.Data.IDataResourceIdentifier})">
            <summary>
            Creates an instance of the <see cref="T:Json.Schema.Data.DataKeyword"/> class.
            </summary>
            <param name="references">The collection of keywords and references.</param>
        </member>
        <member name="M:Json.Schema.Data.DataKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="M:Json.Schema.Data.DataKeyword.SimpleDownload(System.Uri)">
            <summary>
            Provides a simple data fetch method that supports `http`, `https`, and `file` URI schemes.
            </summary>
            <param name="uri">The URI to fetch.</param>
            <returns>A JSON string representing the data</returns>
            <exception cref="T:System.FormatException">
            Thrown when the URI scheme is not `http`, `https`, or `file`.
            </exception>
        </member>
        <member name="T:Json.Schema.Data.DataKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.Data.DataKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.Data.DataKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.Data.DataKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.Data.DataKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.Data.DataKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.Data.IDataResourceIdentifier">
            <summary>
            Provides an abstraction for different resource identifier types.
            </summary>
        </member>
        <member name="M:Json.Schema.Data.IDataResourceIdentifier.TryResolve(Json.Schema.KeywordEvaluation,Json.Schema.SchemaRegistry,System.Text.Json.Nodes.JsonNode@)">
            <summary>
            Resolves a resource.
            </summary>
            <param name="evaluation">The evaluation being process.  This will help identify.</param>
            <param name="registry">The schema registry.</param>
            <param name="value">The value, if <paramref name="evaluation"/> was resolvable.</param>
            <returns>True if resolution was successful; false otherwise.</returns>
        </member>
        <member name="T:Json.Schema.Data.JsonPathIdentifier">
            <summary>
            Handles data references that are JSON Paths.
            </summary>
        </member>
        <member name="P:Json.Schema.Data.JsonPathIdentifier.Query">
            <summary>
            Gets the JSON Path query.
            </summary>
        </member>
        <member name="M:Json.Schema.Data.JsonPathIdentifier.#ctor(Json.Path.JsonPath)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Data.JsonPathIdentifier"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:Json.Schema.Data.JsonPathIdentifier.TryResolve(Json.Schema.KeywordEvaluation,Json.Schema.SchemaRegistry,System.Text.Json.Nodes.JsonNode@)">
            <summary>
            Resolves a resource.
            </summary>
            <param name="evaluation">The evaluation being process.  This will help identify.</param>
            <param name="registry">The schema registry.</param>
            <param name="value">The value, if <paramref name="evaluation"/> was resolvable.</param>
            <returns>True if resolution was successful; false otherwise.</returns>
        </member>
        <member name="T:Json.Schema.Data.JsonPointerIdentifier">
            <summary>
            Handles data references that are JSON Pointers.
            </summary>
        </member>
        <member name="P:Json.Schema.Data.JsonPointerIdentifier.Target">
            <summary>
            The JSON Pointer target.
            </summary>
        </member>
        <member name="M:Json.Schema.Data.JsonPointerIdentifier.#ctor(Json.Pointer.JsonPointer)">
            <summary>
            Creates a new instance of <see cref="T:Json.Schema.Data.JsonPointerIdentifier"/>.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Json.Schema.Data.JsonPointerIdentifier.TryResolve(Json.Schema.KeywordEvaluation,Json.Schema.SchemaRegistry,System.Text.Json.Nodes.JsonNode@)">
            <summary>
            Resolves a resource.
            </summary>
            <param name="evaluation">The evaluation being process.  This will help identify.</param>
            <param name="registry">The schema registry.</param>
            <param name="value">The value, if <paramref name="evaluation"/> was resolvable.</param>
            <returns>True if resolution was successful; false otherwise.</returns>
        </member>
        <member name="M:Json.Schema.Data.JsonPointerIdentifier.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Json.Schema.Data.JsonSchemaBuilderExtensions">
            <summary>
            Provides a fluent interface for <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.Data.JsonSchemaBuilderExtensions.Data(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Adds a `data` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="data">The collection of keywords and references.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.Data.JsonSchemaBuilderExtensions.Data(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Adds a `data` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="data">The collection of keywords and references.</param>
            <returns>The builder.</returns>
        </member>
        <member name="T:Json.Schema.Data.JsonSchemaExtensions">
            <summary>
            Some extensions for <see cref="T:Json.Schema.JsonSchema"/>
            </summary>
        </member>
        <member name="M:Json.Schema.Data.JsonSchemaExtensions.GetData(Json.Schema.JsonSchema)">
            <summary>
            Gets the references in `data` if the keyword exists.
            </summary>
        </member>
        <member name="T:Json.Schema.Data.MetaSchemas">
            <summary>
            Defines a meta-schema for the 
            </summary>
        </member>
        <member name="F:Json.Schema.Data.MetaSchemas.DataId">
            <summary>
            The data vocabulary meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Data.MetaSchemas.Data_202012Id">
            <summary>
            The ID for the draft 2020-12 extension vocabulary which includes the array extensions vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Data.MetaSchemas.Data">
            <summary>
            The data vocabulary meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.Data.MetaSchemas.Data_202012">
            <summary>
            A 2020-12 meta-schema which incorporates the data vocabulary.
            </summary>
        </member>
        <member name="T:Json.Schema.Data.RelativeJsonPointerIdentifier">
            <summary>
            Handles data references that are Relative JSON Pointers.
            </summary>
        </member>
        <member name="P:Json.Schema.Data.RelativeJsonPointerIdentifier.Target">
            <summary>
            The Relative JSON Pointer target.
            </summary>
        </member>
        <member name="M:Json.Schema.Data.RelativeJsonPointerIdentifier.#ctor(Json.Pointer.RelativeJsonPointer)">
            <summary>
            Creates a new instance of <see cref="T:Json.Schema.Data.RelativeJsonPointerIdentifier"/>.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Json.Schema.Data.RelativeJsonPointerIdentifier.TryResolve(Json.Schema.KeywordEvaluation,Json.Schema.SchemaRegistry,System.Text.Json.Nodes.JsonNode@)">
            <summary>
            Resolves a resource.
            </summary>
            <param name="evaluation">The evaluation being process.  This will help identify.</param>
            <param name="registry">The schema registry.</param>
            <param name="value">The value, if <paramref name="evaluation"/> was resolvable.</param>
            <returns>True if resolution was successful; false otherwise.</returns>
        </member>
        <member name="M:Json.Schema.Data.RelativeJsonPointerIdentifier.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Json.Schema.Data.UriIdentifier">
            <summary>
            Handles data references that are URIs.
            </summary>
        </member>
        <member name="P:Json.Schema.Data.UriIdentifier.Target">
            <summary>
            The URI target.
            </summary>
        </member>
        <member name="M:Json.Schema.Data.UriIdentifier.#ctor(System.Uri)">
            <summary>
            Creates a new instance of <see cref="T:Json.Schema.Data.UriIdentifier"/>.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Json.Schema.Data.UriIdentifier.TryResolve(Json.Schema.KeywordEvaluation,Json.Schema.SchemaRegistry,System.Text.Json.Nodes.JsonNode@)">
            <summary>
            Resolves a resource.
            </summary>
            <param name="evaluation">The evaluation being process.  This will help identify.</param>
            <param name="registry">The schema registry.</param>
            <param name="value">The value, if <paramref name="evaluation"/> was resolvable.</param>
            <returns>True if resolution was successful; false otherwise.</returns>
        </member>
        <member name="M:Json.Schema.Data.UriIdentifier.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Json.Schema.Data.Vocabularies">
            <summary>
            Declares the vocabularies of the supported drafts.
            </summary>
        </member>
        <member name="F:Json.Schema.Data.Vocabularies.DataId">
            <summary>
            The data vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Data.Vocabularies.Data">
            <summary>
            The data vocabulary.
            </summary>
        </member>
        <member name="M:Json.Schema.Data.Vocabularies.Register(Json.Schema.VocabularyRegistry,Json.Schema.SchemaRegistry)">
            <summary>
            Registers the all components required to use the data vocabulary.
            </summary>
        </member>
        <member name="T:Json.Schema.RefResolutionException">
            <summary>
            Thrown when a reference cannot be resolved.
            </summary>
            <remarks>
            This class will be moved into a future version of JsonSchema.Net.
            </remarks>
        </member>
        <member name="P:Json.Schema.RefResolutionException.References">
            <summary>
            The URI that could not be resolved.
            </summary>
        </member>
        <member name="M:Json.Schema.RefResolutionException.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Exception)">
            <summary>
            Thrown when a reference cannot be resolved.
            </summary>
            <param name="references">The references that could not be resolved.</param>
            <param name="innerException">The exception that caused this error.</param>
        </member>
    </members>
</doc>
