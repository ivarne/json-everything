<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JsonSchema.Net</name>
    </assembly>
    <members>
        <member name="T:Json.Schema.AdditionalItemsKeyword">
            <summary>
            Handles `additionalItems`.
            </summary>
        </member>
        <member name="P:Json.Schema.AdditionalItemsKeyword.Schema">
            <summary>
            The schema by which to validation additional items.
            </summary>
        </member>
        <member name="M:Json.Schema.AdditionalItemsKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.AdditionalItemsKeyword"/>.
            </summary>
            <param name="value">The keyword's schema.</param>
        </member>
        <member name="M:Json.Schema.AdditionalItemsKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.AdditionalItemsKeyword.Equals(Json.Schema.AdditionalItemsKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.AdditionalItemsKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.AdditionalItemsKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.AdditionalPropertiesKeyword">
            <summary>
            Handles `additionalProperties`.
            </summary>
        </member>
        <member name="P:Json.Schema.AdditionalPropertiesKeyword.Schema">
            <summary>
            The schema by which to validation additional properties.
            </summary>
        </member>
        <member name="M:Json.Schema.AdditionalPropertiesKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.AdditionalPropertiesKeyword"/>.
            </summary>
            <param name="value">The keyword's schema.</param>
        </member>
        <member name="M:Json.Schema.AdditionalPropertiesKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.AdditionalPropertiesKeyword.Equals(Json.Schema.AdditionalPropertiesKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.AdditionalPropertiesKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.AdditionalPropertiesKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.AllOfKeyword">
            <summary>
            Handles `allOf`.
            </summary>
        </member>
        <member name="P:Json.Schema.AllOfKeyword.Schemas">
            <summary>
            The keywords schema collection.
            </summary>
        </member>
        <member name="M:Json.Schema.AllOfKeyword.#ctor(Json.Schema.JsonSchema[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.AllOfKeyword"/>.
            </summary>
            <param name="values">The set of schemas.</param>
        </member>
        <member name="M:Json.Schema.AllOfKeyword.#ctor(System.Collections.Generic.IEnumerable{Json.Schema.JsonSchema})">
            <summary>
            Creates a new <see cref="T:Json.Schema.AllOfKeyword"/>.
            </summary>
            <param name="values">The set of schemas.</param>
        </member>
        <member name="M:Json.Schema.AllOfKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.AllOfKeyword.Equals(Json.Schema.AllOfKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.AllOfKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.AllOfKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.AnchorKeyword">
            <summary>
            Handles `$anchor`.
            </summary>
        </member>
        <member name="P:Json.Schema.AnchorKeyword.Anchor">
            <summary>
            The value of the anchor.
            </summary>
        </member>
        <member name="M:Json.Schema.AnchorKeyword.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.AnchorKeyword"/>.
            </summary>
            <param name="anchor">The anchor value.</param>
        </member>
        <member name="M:Json.Schema.AnchorKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.AnchorKeyword.Equals(Json.Schema.AnchorKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.AnchorKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.AnchorKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.Annotation">
            <summary>
            Holder for an annotation value.
            </summary>
        </member>
        <member name="P:Json.Schema.Annotation.Owner">
            <summary>
            The keyword that created the annotation (acts as a key for lookup).
            </summary>
        </member>
        <member name="P:Json.Schema.Annotation.Value">
            <summary>
            The annotation value.
            </summary>
        </member>
        <member name="P:Json.Schema.Annotation.Source">
            <summary>
            The pointer to the keyword that created the annotation.
            </summary>
        </member>
        <member name="M:Json.Schema.Annotation.#ctor(System.String,System.Object,Json.Pointer.JsonPointer@)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Annotation"/>.
            </summary>
            <param name="owner">The keyword that created the annotation (acts as a key for lookup).</param>
            <param name="value">The annotation value.</param>
            <param name="source">The pointer to the keyword that created the annotation.</param>
        </member>
        <member name="T:Json.Schema.AnyOfKeyword">
            <summary>
            Handles `anyOf`.
            </summary>
        </member>
        <member name="P:Json.Schema.AnyOfKeyword.Schemas">
            <summary>
            The keywords schema collection.
            </summary>
        </member>
        <member name="M:Json.Schema.AnyOfKeyword.#ctor(Json.Schema.JsonSchema[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.AnyOfKeyword"/>.
            </summary>
            <param name="values">The set of schemas.</param>
        </member>
        <member name="M:Json.Schema.AnyOfKeyword.#ctor(System.Collections.Generic.IEnumerable{Json.Schema.JsonSchema})">
            <summary>
            Creates a new <see cref="T:Json.Schema.AnyOfKeyword"/>.
            </summary>
            <param name="values">The set of schemas.</param>
        </member>
        <member name="M:Json.Schema.AnyOfKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.AnyOfKeyword.Equals(Json.Schema.AnyOfKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.AnyOfKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.AnyOfKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.ApplicatorAttribute">
            <summary>
            Indicates that the keyword is classified as an applicator.
            </summary>
            <remarks>
            Apply this attribute to your schema keyword if it contains subschemas
            that also provide validations.
            </remarks>
        </member>
        <member name="T:Json.Schema.CommentKeyword">
            <summary>
            Handles `$comment`.
            </summary>
        </member>
        <member name="P:Json.Schema.CommentKeyword.Value">
            <summary>
            The comment value.
            </summary>
        </member>
        <member name="M:Json.Schema.CommentKeyword.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.CommentKeyword"/>.
            </summary>
            <param name="value">The comment value.</param>
        </member>
        <member name="M:Json.Schema.CommentKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.CommentKeyword.Equals(Json.Schema.CommentKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.CommentKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.CommentKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.ConstKeyword">
            <summary>
            Handles `const`.
            </summary>
        </member>
        <member name="P:Json.Schema.ConstKeyword.Value">
            <summary>
            The constant value.
            </summary>
        </member>
        <member name="M:Json.Schema.ConstKeyword.#ctor(System.Text.Json.Nodes.JsonNode)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ConstKeyword"/>.
            </summary>
            <param name="value">The constant value.</param>
        </member>
        <member name="M:Json.Schema.ConstKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.ConstKeyword.Equals(Json.Schema.ConstKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ConstKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ConstKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.ErrorMessages">
             <summary>
             Manages error messages returned by built-in keywords.
             </summary>
             <remarks>
             Default messages are provided by culture-specific resource files.
            
             Many messages support tokens in the format `[[foo]]`.
             Each message will specify the tokens it supports.
             </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Const">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.ConstKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[value]] - the value in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Contains">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.ContainsKeyword"/>.
            </summary>
            <remarks>No tokens are supported.</remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Dependencies">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.DependenciesKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[properties]] - the properties which failed to match the requirements
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.DependentRequired">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.DependentRequiredKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[missing]] - the value in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.DependentSchemas">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.DependentSchemasKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[value]] - the value in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Enum">
             <summary>
             Gets or sets the error message for <see cref="T:Json.Schema.EnumKeyword"/>.
             </summary>
             <remarks>
            	Available tokens are:
               - [[received]] - the value provided in the JSON instance
               - [[values]] - the available values in the schema
            
             The default messages are static and do not use these tokens as enum values
             may be any JSON type and could be quite large.  They are provided to support
             custom messages.
             </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Culture">
            <summary>
            Gets or sets a culture to use for error messages.  Default is <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.ErrorMessages.ReplaceTokens(System.String,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Replaces tokens in the form of `[[token]]` with a specified value, serialized as JSON.
            </summary>
            <param name="message">The message template.</param>
            <param name="parameters">
            Tuple of the token name (without brackets) and the value which will replace it.
            </param>
            <returns>The detokenized string.</returns>
        </member>
        <member name="P:Json.Schema.ErrorMessages.ExclusiveMaximum">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.ExclusiveMaximumKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the value provided in the JSON instance
              - [[limit]] - the upper limit in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.ExclusiveMinimum">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.ExclusiveMinimumKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the value provided in the JSON instance
              - [[limit]] - the lower limit in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.UnknownFormat">
            <summary>
            Gets or sets the error message for an unknown format.
            </summary>
            <remarks>
            Available tokens are:
              - [[format]] - the format key
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Format">
            <summary>
            Gets or sets the error message for the <see cref="T:Json.Schema.FormatKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[format]] - the format key
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.FormatWithDetail">
            <summary>
            Gets or sets the error message for the <see cref="T:Json.Schema.FormatKeyword"/> with
            additional information from the format validation.
            </summary>
            <remarks>
            Available tokens are:
              - [[format]] - the format key
              - [[detail]] - the format key
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.InvalidItemsForm">
            <summary>
            Gets or sets the error message for when <see cref="T:Json.Schema.ItemsKeyword"/> is specified
            with an array of schemas in a draft 2020-12 or later schema.
            </summary>
            <remarks>No tokens are supported.</remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.FalseSchema">
            <summary>
            Gets or sets the error message for the "false" schema.
            </summary>
            <remarks>No tokens are supported.</remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.MaxContains">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.MaxContainsKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the number of matching items provided in the JSON instance
              - [[limit]] - the upper limit specified in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Maximum">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.MinimumKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the value provided in the JSON instance
              - [[limit]] - the upper limit in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.MaxItems">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.MaxItemsKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the number of items provided in the JSON instance
              - [[limit]] - the upper limit specified in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.MaxLength">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.MaxLengthKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the length of the JSON string
              - [[limit]] - the upper limit specified in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.MaxProperties">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.MaxPropertiesKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the number of properties provided in the JSON instance
              - [[limit]] - the upper limit specified in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.MinContains">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.MinContainsKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the number of matching items provided in the JSON instance
              - [[limit]] - the lower limit specified in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Minimum">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.MinimumKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the value provided in the JSON instance
              - [[limit]] - the lower limit in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.MinItems">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.MinItemsKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the number of items provided in the JSON instance
              - [[limit]] - the lower limit specified in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.MinLength">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.MinLengthKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the length of the JSON string
              - [[limit]] - the lower limit specified in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.MinProperties">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.MinPropertiesKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the number of properties provided in the JSON instance
              - [[limit]] - the lower limit specified in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.MultipleOf">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.MultipleOfKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the value provided in the JSON instance
              - [[divisor]] - the required divisor
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.OneOf">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.OneOfKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[count]] - the number of subschemas that passed validation
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.InvalidPattern">
            <summary>
            Gets or sets the error message for when the <see cref="T:Json.Schema.PatternKeyword"/> contains
            an invalid or unsupported regular expression.
            </summary>
            <remarks>
            Available tokens are:
              - [[pattern]] - the regular expression
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Pattern">
             <summary>
             Gets or sets the error message for <see cref="T:Json.Schema.OneOfKeyword"/>.
             </summary>
             <remarks>
            	Available tokens are:
               - [[received]] - the value provided in the JSON instance
               - [[pattern]] - the number of subschemas that passed validation
            
             The default messages are static and do not use these tokens as string values
             could be quite large.  They are provided to support custom messages.
             </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.RecursiveRef">
            <summary>
            Gets or sets the error message for when a recursive reference is encountered.
            </summary>
            <remarks>No tokens are supported.</remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.BaseUriResolution">
            <summary>
            Gets or sets the error message for when a base URI cannot be resolved.
            </summary>
            <remarks>
            Available tokens are:
              - [[uri]] - the base URI to resolve
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.PointerParse">
            <summary>
            Gets or sets the error message for when a URI fragment cannot be parsed into a JSON Pointer.
            </summary>
            <remarks>
            Available tokens are:
              - [[fragment]] - the pointer fragment
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.RefResolution">
            <summary>
            Gets or sets the error message for when a reference fails to resolve.
            </summary>
            <remarks>
            Available tokens are:
              - [[uri]] - the reference to resolve
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Required">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.RequiredKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[missing]] - the properties missing from the JSON instance
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.MetaSchemaResolution">
            <summary>
            Gets or sets the error message for when the meta-schema cannot be resolved.
            </summary>
            <remarks>
            Available tokens are:
              - [[uri]] - the URI of the meta-schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.MetaSchemaValidation">
            <summary>
            Gets or sets the error message for when the schema cannot be validated
            against the meta-schema.
            </summary>
            <remarks>
            Available tokens are:
              - [[uri]] - the URI of the meta-schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Type">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.TypeKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the type of value provided in the JSON instance
              - [[expected]] - the type(s) required by the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.UniqueItems">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.UniqueItemsKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[duplicates]] - the indices of duplicate pairs as a comma-delimited list of "(x, y)" items
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.UnknownVocabularies">
            <summary>
            Gets or sets the error message for when a vocabulary is unknown but required.
            </summary>
            <remarks>
            Available tokens are:
              - [[vocabs]] - the URI IDs of the missing vocabularies as a comma-delimited list
            </remarks>
        </member>
        <member name="T:Json.Schema.ContainsKeyword">
            <summary>
            Handles `contains`.
            </summary>
        </member>
        <member name="P:Json.Schema.ContainsKeyword.Schema">
            <summary>
            The schema to match.
            </summary>
        </member>
        <member name="M:Json.Schema.ContainsKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ContainsKeyword"/>.
            </summary>
            <param name="value">The schema to match.</param>
        </member>
        <member name="M:Json.Schema.ContainsKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.ContainsKeyword.Equals(Json.Schema.ContainsKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ContainsKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ContainsKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.ContentEncodingKeyword">
            <summary>
            Handles `contentMediaEncoding`.
            </summary>
        </member>
        <member name="P:Json.Schema.ContentEncodingKeyword.Value">
            <summary>
            The encoding value.
            </summary>
        </member>
        <member name="M:Json.Schema.ContentEncodingKeyword.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ContentEncodingKeyword"/>.
            </summary>
            <param name="value">The encoding value.</param>
        </member>
        <member name="M:Json.Schema.ContentEncodingKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.ContentEncodingKeyword.Equals(Json.Schema.ContentEncodingKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ContentEncodingKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ContentEncodingKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.ContentMediaTypeKeyword">
            <summary>
            Handles `contentMediaType`.
            </summary>
        </member>
        <member name="P:Json.Schema.ContentMediaTypeKeyword.Value">
            <summary>
            The media type.
            </summary>
        </member>
        <member name="M:Json.Schema.ContentMediaTypeKeyword.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ContentMediaTypeKeyword"/>.
            </summary>
            <param name="value">The media type.</param>
        </member>
        <member name="M:Json.Schema.ContentMediaTypeKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.ContentMediaTypeKeyword.Equals(Json.Schema.ContentMediaTypeKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ContentMediaTypeKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ContentMediaTypeKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.ContentSchemaKeyword">
            <summary>
            Handles `contentSchema`.
            </summary>
        </member>
        <member name="P:Json.Schema.ContentSchemaKeyword.Schema">
            <summary>
            The schema against which to validate the content.
            </summary>
        </member>
        <member name="M:Json.Schema.ContentSchemaKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ContentSchemaKeyword"/>.
            </summary>
            <param name="value">The schema against which to validate the content.</param>
        </member>
        <member name="M:Json.Schema.ContentSchemaKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.ContentSchemaKeyword.Equals(Json.Schema.ContentSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ContentSchemaKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ContentSchemaKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.DefaultKeyword">
            <summary>
            Handles `default`.
            </summary>
        </member>
        <member name="P:Json.Schema.DefaultKeyword.Value">
            <summary>
            The value to use as the default.
            </summary>
        </member>
        <member name="M:Json.Schema.DefaultKeyword.#ctor(System.Text.Json.Nodes.JsonNode)">
            <summary>
            Creates a new <see cref="T:Json.Schema.DefaultKeyword"/>.
            </summary>
            <param name="value">The value to use as the default.</param>
        </member>
        <member name="M:Json.Schema.DefaultKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.DefaultKeyword.Equals(Json.Schema.DefaultKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DefaultKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DefaultKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.DefinitionsKeyword">
            <summary>
            Handles `definitions`.
            </summary>
        </member>
        <member name="P:Json.Schema.DefinitionsKeyword.Definitions">
            <summary>
            The collection of schema definitions.
            </summary>
        </member>
        <member name="M:Json.Schema.DefinitionsKeyword.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.JsonSchema})">
            <summary>
            Creates a new <see cref="T:Json.Schema.DefinitionsKeyword"/>.
            </summary>
            <param name="values">The collection of schema definitions.</param>
        </member>
        <member name="M:Json.Schema.DefinitionsKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.DefinitionsKeyword.Equals(Json.Schema.DefinitionsKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DefinitionsKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DefinitionsKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.DefsKeyword">
            <summary>
            Handles `$defs`.
            </summary>
        </member>
        <member name="P:Json.Schema.DefsKeyword.Definitions">
            <summary>
            The collection of schema definitions.
            </summary>
        </member>
        <member name="M:Json.Schema.DefsKeyword.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.JsonSchema})">
            <summary>
            Creates a new <see cref="T:Json.Schema.DefsKeyword"/>.
            </summary>
            <param name="values">The collection of schema definitions.</param>
        </member>
        <member name="M:Json.Schema.DefsKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.DefsKeyword.Equals(Json.Schema.DefsKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DefsKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DefsKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.DependenciesKeyword">
            <summary>
            Handles `dependencies`.
            </summary>
        </member>
        <member name="P:Json.Schema.DependenciesKeyword.Requirements">
            <summary>
            The collection of dependencies.
            </summary>
        </member>
        <member name="M:Json.Schema.DependenciesKeyword.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.SchemaOrPropertyList})">
            <summary>
            Creates a new <see cref="T:Json.Schema.DependenciesKeyword"/>.
            </summary>
            <param name="values">The collection of dependencies.</param>
        </member>
        <member name="M:Json.Schema.DependenciesKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.DependenciesKeyword.Equals(Json.Schema.DependenciesKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DependenciesKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DependenciesKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.SchemaOrPropertyList">
            <summary>
            A holder for either a schema dependency or a requirements dependency.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaOrPropertyList.Schema">
            <summary>
            The schema dependency.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaOrPropertyList.Requirements">
            <summary>
            The property dependency.
            </summary>
        </member>
        <member name="M:Json.Schema.SchemaOrPropertyList.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a schema dependency.
            </summary>
            <param name="schema">The schema dependency.</param>
        </member>
        <member name="M:Json.Schema.SchemaOrPropertyList.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Creates a property dependency.
            </summary>
            <param name="requirements">The property dependency.</param>
        </member>
        <member name="M:Json.Schema.SchemaOrPropertyList.Equals(Json.Schema.SchemaOrPropertyList)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.SchemaOrPropertyList.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.SchemaOrPropertyList.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.DependentRequiredKeyword">
            <summary>
            Handles `dependentRequired`.
            </summary>
        </member>
        <member name="P:Json.Schema.DependentRequiredKeyword.Requirements">
            <summary>
            The collection of "required"-type dependencies.
            </summary>
        </member>
        <member name="M:Json.Schema.DependentRequiredKeyword.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Collections.Generic.IReadOnlyList{System.String}})">
            <summary>
            Creates a new <see cref="T:Json.Schema.DependentRequiredKeyword"/>.
            </summary>
            <param name="values">The collection of "required"-type dependencies.</param>
        </member>
        <member name="M:Json.Schema.DependentRequiredKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.DependentRequiredKeyword.Equals(Json.Schema.DependentRequiredKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DependentRequiredKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DependentRequiredKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.DependentSchemasKeyword">
            <summary>
            Handles `dependentSchemas`.
            </summary>
        </member>
        <member name="P:Json.Schema.DependentSchemasKeyword.Schemas">
            <summary>
            The collection of "schema"-type dependencies.
            </summary>
        </member>
        <member name="M:Json.Schema.DependentSchemasKeyword.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.JsonSchema})">
            <summary>
            Creates a new <see cref="T:Json.Schema.DependentSchemasKeyword"/>.
            </summary>
            <param name="values">The collection of "schema"-type dependencies.</param>
        </member>
        <member name="M:Json.Schema.DependentSchemasKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.DependentSchemasKeyword.Equals(Json.Schema.DependentSchemasKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DependentSchemasKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DependentSchemasKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.DeprecatedKeyword">
            <summary>
            Handles `deprecated`.
            </summary>
        </member>
        <member name="P:Json.Schema.DeprecatedKeyword.Value">
            <summary>
            Whether the schema is deprecated.
            </summary>
        </member>
        <member name="M:Json.Schema.DeprecatedKeyword.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.DeprecatedKeyword"/>.
            </summary>
            <param name="value">Whether the schema is deprecated.</param>
        </member>
        <member name="M:Json.Schema.DeprecatedKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.DeprecatedKeyword.Equals(Json.Schema.DeprecatedKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DeprecatedKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DeprecatedKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.DescriptionKeyword">
            <summary>
            Handles `description`.
            </summary>
        </member>
        <member name="P:Json.Schema.DescriptionKeyword.Value">
            <summary>
            The description.
            </summary>
        </member>
        <member name="M:Json.Schema.DescriptionKeyword.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.DescriptionKeyword"/>.
            </summary>
            <param name="value">The description.</param>
        </member>
        <member name="M:Json.Schema.DescriptionKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.DescriptionKeyword.Equals(Json.Schema.DescriptionKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DescriptionKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DescriptionKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.Draft">
            <summary>
            Enumerates the supported JSON Schema drafts.
            </summary>
        </member>
        <member name="F:Json.Schema.Draft.Unspecified">
            <summary>
            The draft to use should be determined by the collection of keywords.
            </summary>
        </member>
        <member name="F:Json.Schema.Draft.Draft6">
            <summary>
            JSON Schema Draft 6.
            </summary>
        </member>
        <member name="F:Json.Schema.Draft.Draft7">
            <summary>
            JSON Schema Draft 7.
            </summary>
        </member>
        <member name="F:Json.Schema.Draft.Draft201909">
            <summary>
            JSON Schema Draft 2019-09.
            </summary>
        </member>
        <member name="F:Json.Schema.Draft.Draft202012">
            <summary>
            JSON Schema Draft 2020-12.
            </summary>
        </member>
        <member name="T:Json.Schema.Duration">
            <summary>
            Represents an ISO 8601 ABNF duration value.
            </summary>
        </member>
        <member name="P:Json.Schema.Duration.Years">
            <summary>
            The number of years.
            </summary>
        </member>
        <member name="P:Json.Schema.Duration.Months">
            <summary>
            The number of months.
            </summary>
        </member>
        <member name="P:Json.Schema.Duration.Weeks">
            <summary>
            The number of weeks.  Incompatible with <see cref="P:Json.Schema.Duration.Years"/>, <see cref="P:Json.Schema.Duration.Months"/>, and <see cref="P:Json.Schema.Duration.Days"/>.
            </summary>
        </member>
        <member name="P:Json.Schema.Duration.Days">
            <summary>
            The number of days.
            </summary>
        </member>
        <member name="P:Json.Schema.Duration.Hours">
            <summary>
            The number of hours.
            </summary>
        </member>
        <member name="P:Json.Schema.Duration.Minutes">
            <summary>
            The number of minutes.
            </summary>
        </member>
        <member name="P:Json.Schema.Duration.Seconds">
            <summary>
            The number of seconds.
            </summary>
        </member>
        <member name="M:Json.Schema.Duration.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Json.Schema.Duration"/> from a string.
            </summary>
            <param name="source">The source string.</param>
            <returns>A duration.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="source"/> does not contains a valid duration string.</exception>
        </member>
        <member name="M:Json.Schema.Duration.TryParse(System.String,Json.Schema.Duration@)">
            <summary>
            Parses a <see cref="T:Json.Schema.Duration"/> from a string.
            </summary>
            <param name="source">The source string.</param>
            <param name="duration">The resulting duration.</param>
            <returns>`true` if the parse was successful; `false` otherwise.</returns>
        </member>
        <member name="T:Json.Schema.DynamicAnchorKeyword">
            <summary>
            Handles `$dynamicAnchor`.
            </summary>
        </member>
        <member name="P:Json.Schema.DynamicAnchorKeyword.Value">
            <summary>
            Gets the anchor value.
            </summary>
        </member>
        <member name="M:Json.Schema.DynamicAnchorKeyword.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.DynamicAnchorKeyword"/>.
            </summary>
            <param name="value">The anchor value.</param>
        </member>
        <member name="M:Json.Schema.DynamicAnchorKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.DynamicAnchorKeyword.Equals(Json.Schema.DynamicAnchorKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DynamicAnchorKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DynamicAnchorKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.DynamicRefKeyword">
            <summary>
            Handles `$dynamicRef`.
            </summary>
        </member>
        <member name="P:Json.Schema.DynamicRefKeyword.Reference">
            <summary>
            The URI reference.
            </summary>
        </member>
        <member name="M:Json.Schema.DynamicRefKeyword.#ctor(System.Uri)">
            <summary>
            Creates a new <see cref="T:Json.Schema.DynamicRefKeyword"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Json.Schema.DynamicRefKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.DynamicRefKeyword.Equals(Json.Schema.DynamicRefKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DynamicRefKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DynamicRefKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.ElseKeyword">
            <summary>
            Handles `else`.
            </summary>
        </member>
        <member name="P:Json.Schema.ElseKeyword.Schema">
            <summary>
            The schema to match.
            </summary>
        </member>
        <member name="M:Json.Schema.ElseKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ElseKeyword"/>.
            </summary>
            <param name="value">The schema to match.</param>
        </member>
        <member name="M:Json.Schema.ElseKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.ElseKeyword.Equals(Json.Schema.ElseKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ElseKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ElseKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.EnumerableExtensions">
            <summary>
            More extensions on <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.EnumerableExtensions.ContentsEqual``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Determines contents-based equality: each element appears equally in each set.
            </summary>
            <param name="collection">The first collection.</param>
            <param name="other">The second collection.</param>
            <typeparam name="T">The element type.</typeparam>
            <returns>`true` if the collections contain the same number of the same elements; `false` otherwise.</returns>
        </member>
        <member name="M:Json.Schema.EnumerableExtensions.ContentsEqual``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines contents-based equality: each element appears equally in each set.
            </summary>
            <param name="collection">The first collection.</param>
            <param name="other">The second collection.</param>
            <param name="comparer">A custom equality comparer.</param>
            <typeparam name="T">The element type.</typeparam>
            <returns>`true` if the collections contain the same number of the same elements; `false` otherwise.</returns>
        </member>
        <member name="M:Json.Schema.EnumerableExtensions.GetStringDictionaryHashCode``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Gets a string-dictionary-oriented hash code by combining the hash codes of its elements.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="collection">The collection of elements.</param>
            <returns>A singular integer value that represents the collection.</returns>
            <remarks>
            This can be used to correctly compare the contents of string dictionaries where
            key ordering is not important.
            </remarks>
        </member>
        <member name="M:Json.Schema.EnumerableExtensions.GetStringDictionaryHashCode``1(System.Collections.Generic.IReadOnlyDictionary{System.String,``0})">
            <summary>
            Gets a string-dictionary-oriented hash code by combining the hash codes of its elements.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="collection">The collection of elements.</param>
            <returns>A singular integer value that represents the collection.</returns>
            <remarks>
            This can be used to correctly compare the contents of string dictionaries where
            key ordering is not important.
            </remarks>
        </member>
        <member name="M:Json.Schema.EnumerableExtensions.GetUnorderedCollectionHashCode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a collection-oriented hash code by combining the hash codes of its elements.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="collection">The collection of elements.</param>
            <returns>A singular integer value that represents the collection.</returns>
            <remarks>This can be used to correctly compare the contents of collections.</remarks>
        </member>
        <member name="T:Json.Schema.EnumKeyword">
            <summary>
            Handles `enum`.
            </summary>
        </member>
        <member name="P:Json.Schema.EnumKeyword.Values">
            <summary>
            The collection of enum values.
            </summary>
            <remarks>
            Enum values aren't necessarily strings; they can be of any JSON value.
            </remarks>
        </member>
        <member name="M:Json.Schema.EnumKeyword.#ctor(System.Text.Json.Nodes.JsonNode[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.EnumKeyword"/>.
            </summary>
            <param name="values">The collection of enum values.</param>
        </member>
        <member name="M:Json.Schema.EnumKeyword.#ctor(System.Collections.Generic.IEnumerable{System.Text.Json.Nodes.JsonNode})">
            <summary>
            Creates a new <see cref="T:Json.Schema.EnumKeyword"/>.
            </summary>
            <param name="values">The collection of enum values.</param>
        </member>
        <member name="M:Json.Schema.EnumKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.EnumKeyword.Equals(Json.Schema.EnumKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.EnumKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.EnumKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.ExamplesKeyword">
            <summary>
            Handles `examples`.
            </summary>
        </member>
        <member name="P:Json.Schema.ExamplesKeyword.Values">
            <summary>
            The collection of example values.
            </summary>
        </member>
        <member name="M:Json.Schema.ExamplesKeyword.#ctor(System.Text.Json.Nodes.JsonNode[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.ExamplesKeyword"/>.
            </summary>
            <param name="values">The collection of example values.</param>
        </member>
        <member name="M:Json.Schema.ExamplesKeyword.#ctor(System.Collections.Generic.IEnumerable{System.Text.Json.Nodes.JsonNode})">
            <summary>
            Creates a new <see cref="T:Json.Schema.ExamplesKeyword"/>.
            </summary>
            <param name="values">The collection of example values.</param>
        </member>
        <member name="M:Json.Schema.ExamplesKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.ExamplesKeyword.Equals(Json.Schema.ExamplesKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ExamplesKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ExamplesKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.ExclusiveMaximumKeyword">
            <summary>
            Handles `exclusiveMaximum`.
            </summary>
        </member>
        <member name="P:Json.Schema.ExclusiveMaximumKeyword.Value">
            <summary>
            The maximum value.
            </summary>
        </member>
        <member name="M:Json.Schema.ExclusiveMaximumKeyword.#ctor(System.Decimal)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ExclusiveMaximumKeyword"/>.
            </summary>
            <param name="value">The maximum value.</param>
        </member>
        <member name="M:Json.Schema.ExclusiveMaximumKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.ExclusiveMaximumKeyword.Equals(Json.Schema.ExclusiveMaximumKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ExclusiveMaximumKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ExclusiveMaximumKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.ExclusiveMinimumKeyword">
            <summary>
            Handles `exclusiveMinimum`.
            </summary>
        </member>
        <member name="P:Json.Schema.ExclusiveMinimumKeyword.Value">
            <summary>
            The minimum value.
            </summary>
        </member>
        <member name="M:Json.Schema.ExclusiveMinimumKeyword.#ctor(System.Decimal)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ExclusiveMinimumKeyword"/>.
            </summary>
            <param name="value">The minimum value.</param>
        </member>
        <member name="M:Json.Schema.ExclusiveMinimumKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.ExclusiveMinimumKeyword.Equals(Json.Schema.ExclusiveMinimumKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ExclusiveMinimumKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ExclusiveMinimumKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.Format">
            <summary>
            Represents a format.
            </summary>
        </member>
        <member name="P:Json.Schema.Format.Key">
            <summary>
            The format key.
            </summary>
        </member>
        <member name="M:Json.Schema.Format.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Format"/>.
            </summary>
            <param name="key">The format key.</param>
        </member>
        <member name="M:Json.Schema.Format.Validate(System.Text.Json.Nodes.JsonNode,System.String@)">
            <summary>
            Validates an instance against a format and provides an error message.
            </summary>
            <param name="node">The node to validate.</param>
            <param name="errorMessage">An error message.</param>
            <returns>`true`.  Override to return another value.</returns>
        </member>
        <member name="T:Json.Schema.FormatKeyword">
            <summary>
            Handles `format`.
            </summary>
        </member>
        <member name="P:Json.Schema.FormatKeyword.Value">
            <summary>
            The format.
            </summary>
        </member>
        <member name="M:Json.Schema.FormatKeyword.#ctor(Json.Schema.Format)">
            <summary>
            Creates a new <see cref="T:Json.Schema.FormatKeyword"/>.
            </summary>
            <param name="value">The format.</param>
        </member>
        <member name="M:Json.Schema.FormatKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.FormatKeyword.Equals(Json.Schema.FormatKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.FormatKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.FormatKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.Formats">
            <summary>
            The formats supported by JSON Schema base specifications.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.Date">
            <summary>
            Defines the `date` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.DateTime">
            <summary>
            Defines the `date-time` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.Duration">
            <summary>
            Defines the `duration` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.Email">
            <summary>
            Defines the `email` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.Hostname">
            <summary>
            Defines the `hostname` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.IdnEmail">
            <summary>
            Defines the `idn-email` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.IdnHostname">
            <summary>
            Defines the `idn-hostname` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.Ipv4">
            <summary>
            Defines the `ipv4` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.Ipv6">
            <summary>
            Defines the `ipv6` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.Iri">
            <summary>
            Defines the `iri` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.IriReference">
            <summary>
            Defines the `iri-reference` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.JsonPointer">
            <summary>
            Defines the `json-pointer` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.Regex">
            <summary>
            Defines the `regex` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.RelativeJsonPointer">
            <summary>
            Defines the `relative-json-pointer` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.Time">
            <summary>
            Defines the `time` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.Uri">
            <summary>
            Defines the `uri` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.UriReference">
            <summary>
            Defines the `uri-reference` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.UriTemplate">
            <summary>
            Defines the `uri-template` format.
            </summary>
            <remarks>
            This is currently the same check as `uri`.  The infrastructure to check URI templates
            [does not yet exist in .Net Standard/Core](https://github.com/dotnet/runtime/issues/41587).
            </remarks>
        </member>
        <member name="F:Json.Schema.Formats.Uuid">
            <summary>
            Defines the `uuid` format.
            </summary>
        </member>
        <member name="M:Json.Schema.Formats.Get(System.String)">
            <summary>
            Gets a format by its key.
            </summary>
            <param name="key">The key.</param>
            <returns>The specified format, if known; otherwise null.</returns>
        </member>
        <member name="M:Json.Schema.Formats.Register(Json.Schema.Format)">
            <summary>
            Registers a new format.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:Json.Schema.Formats.CreateUnknown(System.String)">
            <summary>
            Creates an unknown format.
            </summary>
            <param name="name">The format key.</param>
            <returns>A <see cref="T:Json.Schema.Format"/> instance.</returns>
        </member>
        <member name="T:Json.Schema.IdKeyword">
            <summary>
            Handles `$id`.
            </summary>
        </member>
        <member name="P:Json.Schema.IdKeyword.Id">
            <summary>
            The ID.
            </summary>
        </member>
        <member name="M:Json.Schema.IdKeyword.#ctor(System.Uri)">
            <summary>
            Creates a new <see cref="T:Json.Schema.IdKeyword"/>.
            </summary>
            <param name="id">The ID.</param>
        </member>
        <member name="M:Json.Schema.IdKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.IdKeyword.Equals(Json.Schema.IdKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.IdKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.IdKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.IfKeyword">
            <summary>
            Handles `if`.
            </summary>
        </member>
        <member name="P:Json.Schema.IfKeyword.Schema">
            <summary>
            The schema to match.
            </summary>
        </member>
        <member name="M:Json.Schema.IfKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.IfKeyword"/>.
            </summary>
            <param name="value">The schema to match.</param>
        </member>
        <member name="M:Json.Schema.IfKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.IfKeyword.Equals(Json.Schema.IfKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.IfKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.IfKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.IJsonSchemaKeyword">
            <summary>
            Defines basic functionality for schema keywords.
            </summary>
        </member>
        <member name="M:Json.Schema.IJsonSchemaKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="T:Json.Schema.IKeyedSchemaCollector">
            <summary>
            Indicates that the keyword contains a named collection of schemas.
            </summary>
        </member>
        <member name="P:Json.Schema.IKeyedSchemaCollector.Schemas">
            <summary>
            The subschemas.
            </summary>
        </member>
        <member name="T:Json.Schema.ILog">
            <summary>
            Used to log processing details.
            </summary>
        </member>
        <member name="M:Json.Schema.ILog.Write(System.Func{System.String},System.Int32)">
            <summary>
            Logs a message with a newline.
            </summary>
            <param name="message">The message.</param>
            <param name="indent"></param>
        </member>
        <member name="T:Json.Schema.IRefResolvable">
            <summary>
            Defines functionality required to resolve `$ref` and `$recursiveRef` keywords.
            </summary>
            <remarks>
            Should be implemented for any keyword that contains navigable data.
            </remarks>
        </member>
        <member name="M:Json.Schema.IRefResolvable.RegisterSubschemas(Json.Schema.SchemaRegistry,System.Uri)">
            <summary>
            Passes registration of any subschemas back to <see cref="M:Json.Schema.JsonSchema.RegisterSubschemas(Json.Schema.SchemaRegistry,System.Uri)"/>.
            </summary>
            <param name="registry">The registry into which the subschema should be registered.</param>
            <param name="currentUri">The current URI.</param>
            <remarks>
            Just call <see cref="M:Json.Schema.JsonSchema.RegisterSubschemas(Json.Schema.SchemaRegistry,System.Uri)"/> on each schema
            contained within the keyword.  
            </remarks>
        </member>
        <member name="T:Json.Schema.ISchemaCollector">
            <summary>
            Indicates that the keyword contains a collection of schemas.
            </summary>
        </member>
        <member name="P:Json.Schema.ISchemaCollector.Schemas">
            <summary>
            The subschemas.
            </summary>
        </member>
        <member name="T:Json.Schema.ISchemaContainer">
            <summary>
            Indicates that the keyword contains a single schema.
            </summary>
        </member>
        <member name="P:Json.Schema.ISchemaContainer.Schema">
            <summary>
            A subschema.
            </summary>
        </member>
        <member name="T:Json.Schema.ItemsKeyword">
            <summary>
            Handles `items`.
            </summary>
        </member>
        <member name="P:Json.Schema.ItemsKeyword.SingleSchema">
            <summary>
            The schema for the "single schema" form.
            </summary>
        </member>
        <member name="P:Json.Schema.ItemsKeyword.ArraySchemas">
            <summary>
            The collection of schemas for the "schema array" form.
            </summary>
        </member>
        <member name="M:Json.Schema.ItemsKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ItemsKeyword"/>.
            </summary>
            <param name="value">The schema for the "single schema" form.</param>
        </member>
        <member name="M:Json.Schema.ItemsKeyword.#ctor(Json.Schema.JsonSchema[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.ItemsKeyword"/>.
            </summary>
            <param name="values">The collection of schemas for the "schema array" form.</param>
            <remarks>
            Using the `params` constructor to build an array-form `items` keyword with a single schema
            will confuse the compiler.  To achieve this, you'll need to explicitly specify the array.
            </remarks>
        </member>
        <member name="M:Json.Schema.ItemsKeyword.#ctor(System.Collections.Generic.IEnumerable{Json.Schema.JsonSchema})">
            <summary>
            Creates a new <see cref="T:Json.Schema.ItemsKeyword"/>.
            </summary>
            <param name="values">The collection of schemas for the "schema array" form.</param>
        </member>
        <member name="M:Json.Schema.ItemsKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.ItemsKeyword.Equals(Json.Schema.ItemsKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ItemsKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ItemsKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.JsonNodeExtensions">
            <summary>
            Provides some schema-related functionality for <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonNodeExtensions.GetSchemaValueType(System.Text.Json.Nodes.JsonNode)">
            <summary>
            Provides the JSON Schema type of a node.
            </summary>
            <param name="node">The node.</param>
            <returns>The <see cref="T:Json.Schema.SchemaValueType"/> of the node.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Json.Schema.JsonNodeExtensions.VerifyJsonObject(System.Text.Json.Nodes.JsonObject,Json.Schema.ValidationContext)">
            <summary>
            Verifies that a <see cref="T:System.Text.Json.Nodes.JsonObject"/> doesn't have any duplicate keys and can
            therefore be processed.
            </summary>
            <param name="obj">The object.</param>
            <param name="context">The validation context to log errors.</param>
            <returns>true if the the object can be processed; false otherwise.</returns>
            <remarks>See https://github.com/dotnet/runtime/issues/70604 for more information.</remarks>
        </member>
        <member name="T:Json.Schema.JsonSchema">
            <summary>
            Represents a JSON Schema.
            </summary>
        </member>
        <member name="F:Json.Schema.JsonSchema.Empty">
            <summary>
            The empty schema `{}`.  Functionally equivalent to <see cref="F:Json.Schema.JsonSchema.True"/>.
            </summary>
        </member>
        <member name="F:Json.Schema.JsonSchema.True">
            <summary>
            The `true` schema.  Passes all instances.
            </summary>
        </member>
        <member name="F:Json.Schema.JsonSchema.False">
            <summary>
            The `false` schema.  Fails all instances.
            </summary>
        </member>
        <member name="P:Json.Schema.JsonSchema.Keywords">
            <summary>
            Gets the keywords contained in the schema.  Only populated for non-boolean schemas.
            </summary>
        </member>
        <member name="P:Json.Schema.JsonSchema.BoolValue">
            <summary>
            For boolean schemas, gets the value.  Null if the schema isn't a boolean schema.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchema.FromFile(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Loads text from a file and deserializes a <see cref="T:Json.Schema.JsonSchema"/>.
            </summary>
            <param name="fileName">The filename to load, URL-decoded.</param>
            <param name="options">Serializer options.</param>
            <returns>A new <see cref="T:Json.Schema.JsonSchema"/>.</returns>
            <exception cref="T:System.Text.Json.JsonException">Could not deserialize a portion of the schema.</exception>
            <remarks>The filename needs to not be URL-encoded as <see cref="T:System.Uri"/> attempts to encode it.</remarks>
        </member>
        <member name="M:Json.Schema.JsonSchema.FromText(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Deserializes a <see cref="T:Json.Schema.JsonSchema"/> from text.
            </summary>
            <param name="jsonText">The text to parse.</param>
            <param name="options">Serializer options.</param>
            <returns>A new <see cref="T:Json.Schema.JsonSchema"/>.</returns>
            <exception cref="T:System.Text.Json.JsonException">Could not deserialize a portion of the schema.</exception>
        </member>
        <member name="M:Json.Schema.JsonSchema.FromStream(System.IO.Stream,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Deserializes a <see cref="T:Json.Schema.JsonSchema"/> from a stream.
            </summary>
            <param name="source">A stream.</param>
            <param name="options">Serializer options.</param>
            <returns>A new <see cref="T:Json.Schema.JsonSchema"/>.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchema.Validate(System.Text.Json.Nodes.JsonNode,Json.Schema.ValidationOptions)">
            <summary>
            Validates an instance against this schema.
            </summary>
            <param name="root">The root instance.</param>
            <param name="options">The options to use for this validation.</param>
            <returns>A <see cref="T:Json.Schema.ValidationResults"/> that provides the outcome of the validation.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchema.RegisterSubschemas(Json.Schema.SchemaRegistry,System.Uri)">
            <summary>
            Registers a subschema.  To be called from <see cref="T:Json.Schema.IRefResolvable"/> keywords.
            </summary>
            <param name="registry">The registry into which the subschema should be registered.</param>
            <param name="currentUri">The current URI.</param>
        </member>
        <member name="M:Json.Schema.JsonSchema.ValidateSubschema(Json.Schema.ValidationContext)">
            <summary>
            Validates as a subschema.  To be called from within keywords.
            </summary>
            <param name="context">The validation context for this validation pass.</param>
        </member>
        <member name="M:Json.Schema.JsonSchema.op_Implicit(System.Boolean)~Json.Schema.JsonSchema">
            <summary>
            Implicitly converts a boolean value into one of the boolean schemas.
            </summary>
            <param name="value">The boolean value.</param>
        </member>
        <member name="M:Json.Schema.JsonSchema.Equals(Json.Schema.JsonSchema)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchema.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchema.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.JsonSchemaBuilder">
            <summary>
            A fluent-style builder for <see cref="T:Json.Schema.JsonSchema"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilder.Add(Json.Schema.IJsonSchemaKeyword)">
            <summary>
            Adds a new keyword.
            </summary>
            <param name="keyword">The keyword to add.</param>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilder.Get``1">
            <summary>
            Gets a keyword if one has been added.
            </summary>
            <typeparam name="T">the keyword type.</typeparam>
            <returns>The keyword, if it exists; `null` otherwise.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilder.RefRoot">
            <summary>
            Creates a new <see cref="T:Json.Schema.JsonSchema"/>.
            </summary>
            <returns>A JSON Schema that simply refers back to the root schema.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilder.RecursiveRefRoot">
            <summary>
            Creates a new <see cref="T:Json.Schema.JsonSchema"/>.
            </summary>
            <returns>A JSON Schema that simply refers back to the recursive root schema.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilder.Build">
            <summary>
            Builds the schema.
            </summary>
            <returns>A <see cref="T:Json.Schema.JsonSchema"/>.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilder.op_Implicit(Json.Schema.JsonSchemaBuilder)~Json.Schema.JsonSchema">
            <summary>
            For convenience, implicitly calls <see cref="M:Json.Schema.JsonSchemaBuilder.Build"/>.
            </summary>
            <returns>A <see cref="T:Json.Schema.JsonSchema"/>.</returns>
        </member>
        <member name="T:Json.Schema.JsonSchemaBuilderExtensions">
            <summary>
            Provides a fluent interface for <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.AdditionalItems(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add an `additionalItems` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `additionalItems`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.AdditionalProperties(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add an `additionalProperties` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `additionalProperties`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.AllOf(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema[])">
            <summary>
            Add an `allOf` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schemas">The schemas for `allOf`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.AllOf(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IEnumerable{Json.Schema.JsonSchema})">
            <summary>
            Add an `allOf` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schemas">The schemas for `allOf`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Anchor(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add an `$anchor` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="reference">The anchor reference.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.AnyOf(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema[])">
            <summary>
            Add an `anyOf` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schemas">The schemas for `anyOf`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.AnyOf(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IEnumerable{Json.Schema.JsonSchema})">
            <summary>
            Add an `anyOf` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schemas">The schemas for `anyOf`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Comment(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add a `$comment` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="comment">The comment.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Const(Json.Schema.JsonSchemaBuilder,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Add a `const` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="node">The constant value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Contains(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add an `contains` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `contains`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Default(Json.Schema.JsonSchemaBuilder,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Add a `default` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="node">The value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Definitions(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.JsonSchema})">
            <summary>
            Add a `definitions` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="defs">The schema definition map.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Definitions(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.String,Json.Schema.JsonSchema}[])">
            <summary>
            Add a `definitions` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="defs">The schema definition map.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Defs(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.JsonSchema})">
            <summary>
            Add a `$defs` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="defs">The schema definition map.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Defs(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.String,Json.Schema.JsonSchema}[])">
            <summary>
            Add a `$defs` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="defs">The schema definition map.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Dependencies(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.SchemaOrPropertyList})">
            <summary>
            Add a `dependencies` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="deps">The dependencies.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Dependencies(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.String,Json.Schema.SchemaOrPropertyList}[])">
            <summary>
            Add a `dependencies` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="deps">The dependencies.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.DependentRequired(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Collections.Generic.IReadOnlyList{System.String}})">
            <summary>
            Add a `dependentRequired` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="deps">The dependencies.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.DependentRequired(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.String,System.Collections.Generic.IEnumerable{System.String}}[])">
            <summary>
            Add a `dependentRequired` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="deps">The dependencies.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.DependentSchemas(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.JsonSchema})">
            <summary>
            Add a `dependentSchemas` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="deps">The dependencies.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.DependentSchemas(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.String,Json.Schema.JsonSchema}[])">
            <summary>
            Add a `dependentSchemas` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="deps">The dependencies.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Deprecated(Json.Schema.JsonSchemaBuilder,System.Boolean)">
            <summary>
            Add a `deprecated` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="deprecated">Whether the schema is deprecated.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Description(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add a `description` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="description">The description.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.DynamicAnchor(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add an `$dynamicAnchor` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="reference">The anchor reference.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.DynamicRef(Json.Schema.JsonSchemaBuilder,System.Uri)">
            <summary>
            Add a `$dynamicRef` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="reference">The URI reference.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.DynamicRef(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add a `$dynamicRef` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="reference">The URI reference.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Else(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add an `else` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `else`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Enum(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IEnumerable{System.Text.Json.Nodes.JsonNode})">
            <summary>
            Add an `enum` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="elements">The values for the enum.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Enum(Json.Schema.JsonSchemaBuilder,System.Text.Json.Nodes.JsonNode[])">
            <summary>
            Add an `enum` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="elements">The values for the enum.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Enum(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add an `enum` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="elements">The values for the enum.</param>
            <returns>The builder.</returns>
            <remarks>
            This overload is provided as a convenience as string-only enums are most common.
            </remarks>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Examples(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IEnumerable{System.Text.Json.Nodes.JsonNode})">
            <summary>
            Add an `examples` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="elements">The example values.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Examples(Json.Schema.JsonSchemaBuilder,System.Text.Json.Nodes.JsonNode[])">
            <summary>
            Add an `examples` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="elements">The example values.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.ExclusiveMaximum(Json.Schema.JsonSchemaBuilder,System.Decimal)">
            <summary>
            Add an `exclusiveMaximum` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="max">The max value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.ExclusiveMinimum(Json.Schema.JsonSchemaBuilder,System.Decimal)">
            <summary>
            Add an `exclusiveMinimum` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="min">The min value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Format(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add a `format` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="format">The format.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Format(Json.Schema.JsonSchemaBuilder,Json.Schema.Format)">
            <summary>
            Add a `format` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="format">The format.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Id(Json.Schema.JsonSchemaBuilder,System.Uri)">
            <summary>
            Add an `$id` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="id">The ID.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Id(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add an `$id` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="id">The ID.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.If(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add an `if` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `if`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Items(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add a single-schema `items` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `items`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Items(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IEnumerable{Json.Schema.JsonSchema})">
            <summary>
            Add a schema-array `items` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schemas">The schemas for `items`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.MaxContains(Json.Schema.JsonSchemaBuilder,System.UInt32)">
            <summary>
            Add a `maxContains` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The max number of expected matches.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Maximum(Json.Schema.JsonSchemaBuilder,System.Decimal)">
            <summary>
            Add a `maximum` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The max value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.MaxItems(Json.Schema.JsonSchemaBuilder,System.UInt32)">
            <summary>
            Add a `maxItems` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The max number of expected items.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.MaxLength(Json.Schema.JsonSchemaBuilder,System.UInt32)">
            <summary>
            Add a `maxLength` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The max string length.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.MaxProperties(Json.Schema.JsonSchemaBuilder,System.UInt32)">
            <summary>
            Add a `maxProperties` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The max number of expected properties.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.MinContains(Json.Schema.JsonSchemaBuilder,System.UInt32)">
            <summary>
            Add a `minContains` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The min number of expected matches.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Minimum(Json.Schema.JsonSchemaBuilder,System.Decimal)">
            <summary>
            Add a `minimum` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The min value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.MinItems(Json.Schema.JsonSchemaBuilder,System.UInt32)">
            <summary>
            Add a `minItems` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The min number of expected items.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.MinLength(Json.Schema.JsonSchemaBuilder,System.UInt32)">
            <summary>
            Add a `minLength` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The min string length.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.MinProperties(Json.Schema.JsonSchemaBuilder,System.UInt32)">
            <summary>
            Add a `minProperties` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The min number of expected properties.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.MultipleOf(Json.Schema.JsonSchemaBuilder,System.Decimal)">
            <summary>
            Add a `multipleOf` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The divisor.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Not(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add a `not` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `not`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.OneOf(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema[])">
            <summary>
            Add a `oneOf` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schemas">The schema for `oneOf`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.OneOf(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IEnumerable{Json.Schema.JsonSchema})">
            <summary>
            Add a `oneOf` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schemas">The schemas for `oneOf`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Pattern(Json.Schema.JsonSchemaBuilder,System.Text.RegularExpressions.Regex)">
            <summary>
            Add a `pattern` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="pattern">The pattern to match.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Pattern(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add a `pattern` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="pattern">The pattern to match.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.PatternProperties(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.Text.RegularExpressions.Regex,Json.Schema.JsonSchema})">
            <summary>
            Add a `patternProperties` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="props">The property schemas.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.PatternProperties(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.Text.RegularExpressions.Regex,Json.Schema.JsonSchema}[])">
            <summary>
            Add a `patternProperties` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="props">The property schemas.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.PatternProperties(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.JsonSchema})">
            <summary>
            Add a `patternProperties` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="props">The property schemas.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.PatternProperties(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.String,Json.Schema.JsonSchema}[])">
            <summary>
            Add a `patternProperties` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="props">The property schemas.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.PrefixItems(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema[])">
            <summary>
            Add a `prefixItems` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schemas">The schemas for `prefixItems`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.PrefixItems(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IEnumerable{Json.Schema.JsonSchema})">
            <summary>
            Add a `prefixItems` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schemas">The schemas for `prefixItems`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Properties(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.JsonSchema})">
            <summary>
            Add a `properties` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="props">The property schemas.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Properties(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.String,Json.Schema.JsonSchema}[])">
            <summary>
            Add a `properties` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="props">The property schemas.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.PropertyNames(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add a `propertyNames` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `propertyNames`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.ReadOnly(Json.Schema.JsonSchemaBuilder,System.Boolean)">
            <summary>
            Add a `readOnly` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">Whether the instance is read-only.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.RecursiveAnchor(Json.Schema.JsonSchemaBuilder,System.Boolean)">
            <summary>
            Add a `$recursiveAnchor` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The value.</param>
            <returns>The builder.</returns>
            <remarks>
            Per Draft 2019-09, the value must always be `true`.  This is implied for this method.
            </remarks>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.RecursiveRef(Json.Schema.JsonSchemaBuilder,System.Uri)">
            <summary>
            Add a `$recursiveRef` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="reference">The URI reference.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.RecursiveRef(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add a `$recursiveRef` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="reference">The URI reference.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Ref(Json.Schema.JsonSchemaBuilder,System.Uri)">
            <summary>
            Add a `$ref` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="reference">The URI reference.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Ref(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add a `$ref` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="reference">The URI reference.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Required(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add a `required` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="properties">The required property collections.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Required(Json.Schema.JsonSchemaBuilder,System.String[])">
            <summary>
            Add a `required` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="properties">The required property collections.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Schema(Json.Schema.JsonSchemaBuilder,System.Uri)">
            <summary>
            Add a `$schema` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="uri">The uri of the meta-schema.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Schema(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add a `$schema` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="uri">The uri of the meta-schema.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Then(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add a `then` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `then`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Title(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add a `title` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="title">The title.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Type(Json.Schema.JsonSchemaBuilder,Json.Schema.SchemaValueType)">
            <summary>
            Add a `type` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="type">The type.  Can be combined with the bit-wise OR operator `|`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Type(Json.Schema.JsonSchemaBuilder,Json.Schema.SchemaValueType[])">
            <summary>
            Add a `type` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="types">The types.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Type(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IEnumerable{Json.Schema.SchemaValueType})">
            <summary>
            Add a `type` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="types">The types.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.UnevaluatedItems(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add an `unevaluatedItems` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `unevaluatedItems`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.UnevaluatedProperties(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add an `unevaluatedProperties` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `unevaluatedProperties`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.UniqueItems(Json.Schema.JsonSchemaBuilder,System.Boolean)">
            <summary>
            Add a `uniqueItems` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">Whether to expect a unique item set.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Unrecognized(Json.Schema.JsonSchemaBuilder,System.String,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Adds a keyword that's not recognized by any vocabulary - extra data - to the schema.
            </summary>
            <param name="builder">The builder.</param>
            <param name="name">The keyword name.</param>
            <param name="value">The value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Vocabulary(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.Uri,System.Boolean}[])">
            <summary>
            Add an `$vocabulary` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="vocabs">The vocabulary callouts.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Vocabulary(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.String,System.Boolean}[])">
            <summary>
            Add an `$vocabulary` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="vocabs">The vocabulary callouts.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Vocabulary(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.Uri,System.Boolean})">
            <summary>
            Add an `$vocabulary` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="vocabs">The vocabulary callouts.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Vocabulary(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Boolean})">
            <summary>
            Add an `$vocabulary` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="vocabs">The vocabulary callouts.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.WriteOnly(Json.Schema.JsonSchemaBuilder,System.Boolean)">
            <summary>
            Add a `writeOnly` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">Whether the instance is write-only.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Validate(Json.Schema.JsonSchemaBuilder,System.Text.Json.Nodes.JsonNode,Json.Schema.ValidationOptions)">
            <summary>
            Convenience method that builds and validates with a single call.
            </summary>
            <param name="builder">The builder.</param>
            <param name="root">The root instance.</param>
            <param name="options">The options to use for this validation.</param>
            <returns>A <see cref="T:Json.Schema.ValidationResults"/> that provides the outcome of the validation.</returns>
        </member>
        <member name="T:Json.Schema.JsonSchemaExtensions">
            <summary>
            Some extensions for <see cref="T:Json.Schema.JsonSchema"/>
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.Validate(Json.Schema.JsonSchema,System.Text.Json.JsonDocument,Json.Schema.ValidationOptions)">
            <summary>
            Extends <see cref="M:Json.Schema.JsonSchema.Validate(System.Text.Json.Nodes.JsonNode,Json.Schema.ValidationOptions)"/> to take <see cref="T:System.Text.Json.JsonDocument"/>.
            </summary>
            <param name="jsonSchema">The schema.</param>
            <param name="jsonDocument">Document to be validated.</param>
            <param name="options">The options to use for this validation.</param>
            <returns>A <see cref="T:Json.Schema.ValidationResults"/> that provides the outcome of the validation.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.Validate(Json.Schema.JsonSchema,System.Text.Json.JsonElement,Json.Schema.ValidationOptions)">
            <summary>
            Extends <see cref="M:Json.Schema.JsonSchema.Validate(System.Text.Json.Nodes.JsonNode,Json.Schema.ValidationOptions)"/> to take <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="jsonSchema">The schema.</param>
            <param name="jsonElement">Element to be validated.</param>
            <param name="options">The options to use for this validation.</param>
            <returns>A <see cref="T:Json.Schema.ValidationResults"/> that provides the outcome of the validation.</returns>
        </member>
        <member name="T:Json.Schema.KeywordExtensions">
            <summary>
            Some extensions for <see cref="T:Json.Schema.IJsonSchemaKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.KeywordExtensions.Keyword(Json.Schema.IJsonSchemaKeyword)">
            <summary>
            Gets the keyword string.
            </summary>
            <param name="keyword">The keyword.</param>
            <returns>The keyword string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyword"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The keyword does not carry the <see cref="T:Json.Schema.SchemaKeywordAttribute"/>.</exception>
        </member>
        <member name="M:Json.Schema.KeywordExtensions.Priority(Json.Schema.IJsonSchemaKeyword)">
            <summary>
            Gets the keyword priority.
            </summary>
            <param name="keyword">The keyword.</param>
            <returns>The priority.</returns>
        </member>
        <member name="M:Json.Schema.KeywordExtensions.SupportsDraft(Json.Schema.IJsonSchemaKeyword,Json.Schema.Draft)">
            <summary>
            Determines if a keyword is declared by a given draft of the JSON Schema specification.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="draft">The queried draft.</param>
            <returns>true if the keyword is supported by the draft; false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="keyword"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the keyword has no <see cref="T:Json.Schema.SchemaDraftAttribute"/> declarations.</exception>
        </member>
        <member name="M:Json.Schema.KeywordExtensions.IsApplicator(Json.Schema.IJsonSchemaKeyword)">
            <summary>
            Gets whether the keyword is an applicator (carries the <see cref="T:Json.Schema.ApplicatorAttribute"/> attribute).
            </summary>
            <param name="keyword">The keyword.</param>
            <returns>`true` if the keyword is an applicator; `false` otherwise.</returns>
        </member>
        <member name="M:Json.Schema.KeywordExtensions.GetSubschemas(Json.Schema.IJsonSchemaKeyword)">
            <summary>
            Gets all immediate subschemas for a keyword.
            </summary>
            <param name="keyword">The keyword.</param>
            <returns>An `IEnumerable&lt;JsonSchema&gt;`.</returns>
        </member>
        <member name="T:Json.Schema.LogExtensions">
            <summary>
            Provides common log messages.
            </summary>
        </member>
        <member name="M:Json.Schema.LogExtensions.Log(Json.Schema.ValidationContext,System.Func{System.String})">
            <summary>
            Logs a message.
            </summary>
            <param name="context">The validation context.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Json.Schema.LogExtensions.EnterKeyword(Json.Schema.ValidationContext,System.String)">
            <summary>
            Adds a message to indicate a keyword has begun processing.  Increments indention.
            </summary>
            <param name="context">The validation context.</param>
            <param name="keyword">The keyword name</param>
        </member>
        <member name="M:Json.Schema.LogExtensions.ExitKeyword(Json.Schema.ValidationContext,System.String)">
            <summary>
            Adds a message to indicate a keyword has finished processing.  Decrements indention.
            </summary>
            <param name="context">The validation context.</param>
            <param name="keyword">The keyword name</param>
        </member>
        <member name="M:Json.Schema.LogExtensions.ExitKeyword(Json.Schema.ValidationContext,System.String,System.Boolean)">
            <summary>
            Adds a message to indicate a keyword has finished processing.  Decrements indention.
            </summary>
            <param name="context">The validation context.</param>
            <param name="keyword">The keyword name</param>
            <param name="valid">Whether the validation was successful</param>
        </member>
        <member name="M:Json.Schema.LogExtensions.WrongValueKind(Json.Schema.ValidationContext,Json.Schema.SchemaValueType)">
            <summary>
            Adds a message to indicate that a keyword doesn't apply and why.  Decrements indention.
            </summary>
            <param name="context">The validation context.</param>
            <param name="kind">The value kind</param>
        </member>
        <member name="M:Json.Schema.LogExtensions.NotApplicable(Json.Schema.ValidationContext,System.Func{System.String})">
            <summary>
            Adds a message to indicate that a keyword doesn't apply and why.  Decrements indention.
            </summary>
            <param name="context">The validation context.</param>
            <param name="reason">The reason</param>
        </member>
        <member name="M:Json.Schema.LogExtensions.GetValidityString(System.Boolean)">
            <summary>
            Gets the valid or invalid strings.
            </summary>
            <param name="isValid">The validity.</param>
            <returns>"valid" for `true`; "invalid" for `false`.</returns>
        </member>
        <member name="T:Json.Schema.MaxContainsKeyword">
            <summary>
            Handles `maxContains`.
            </summary>
        </member>
        <member name="P:Json.Schema.MaxContainsKeyword.Value">
            <summary>
            The maximum expected matching items.
            </summary>
        </member>
        <member name="M:Json.Schema.MaxContainsKeyword.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.MaxContainsKeyword"/>.
            </summary>
            <param name="value">The maximum expected matching items.</param>
        </member>
        <member name="M:Json.Schema.MaxContainsKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.MaxContainsKeyword.Equals(Json.Schema.MaxContainsKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MaxContainsKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MaxContainsKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.MaximumKeyword">
            <summary>
            Handles `maximum`.
            </summary>
        </member>
        <member name="P:Json.Schema.MaximumKeyword.Value">
            <summary>
            The maximum expected value.
            </summary>
        </member>
        <member name="M:Json.Schema.MaximumKeyword.#ctor(System.Decimal)">
            <summary>
            Creates a new <see cref="T:Json.Schema.MaximumKeyword"/>.
            </summary>
            <param name="value">The maximum expected value.</param>
        </member>
        <member name="M:Json.Schema.MaximumKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.MaximumKeyword.Equals(Json.Schema.MaximumKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MaximumKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MaximumKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.MaxItemsKeyword">
            <summary>
            Handles `maxItems`.
            </summary>
        </member>
        <member name="P:Json.Schema.MaxItemsKeyword.Value">
            <summary>
            The expected maximum number of items.
            </summary>
        </member>
        <member name="M:Json.Schema.MaxItemsKeyword.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.MaxItemsKeyword"/>.
            </summary>
            <param name="value">The expected maximum number of items.</param>
        </member>
        <member name="M:Json.Schema.MaxItemsKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.MaxItemsKeyword.Equals(Json.Schema.MaxItemsKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MaxItemsKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MaxItemsKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.MaxLengthKeyword">
            <summary>
            Handles `maxLength`.
            </summary>
        </member>
        <member name="P:Json.Schema.MaxLengthKeyword.Value">
            <summary>
            The maximum expected string length.
            </summary>
        </member>
        <member name="M:Json.Schema.MaxLengthKeyword.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.MaxLengthKeyword"/>.
            </summary>
            <param name="value">The maximum expected string length.</param>
        </member>
        <member name="M:Json.Schema.MaxLengthKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.MaxLengthKeyword.Equals(Json.Schema.MaxLengthKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MaxLengthKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MaxLengthKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.MaxPropertiesKeyword">
            <summary>
            Handles `maxProperties`.
            </summary>
        </member>
        <member name="P:Json.Schema.MaxPropertiesKeyword.Value">
            <summary>
            The maximum expected number of properties.
            </summary>
        </member>
        <member name="M:Json.Schema.MaxPropertiesKeyword.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.MaxPropertiesKeyword"/>.
            </summary>
            <param name="value">The maximum expected number of properties.</param>
        </member>
        <member name="M:Json.Schema.MaxPropertiesKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.MaxPropertiesKeyword.Equals(Json.Schema.MaxPropertiesKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MaxPropertiesKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MaxPropertiesKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.MetaSchemas">
            <summary>
            Exposes the meta-schemas for the supported drafts.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Draft201909Id">
            <summary>
            The Draft 2019-09 meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Core201909Id">
            <summary>
            The Draft 2019-09 Core meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Applicator201909Id">
            <summary>
            The Draft 2019-09 Applicator meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Validation201909Id">
            <summary>
            The Draft 2019-09 Validation meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Metadata201909Id">
            <summary>
            The Draft 2019-09 Metadata meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Format201909Id">
            <summary>
            The Draft 2019-09 Format meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Content201909Id">
            <summary>
            The Draft 2019-09 Content meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Draft201909">
            <summary>
            The Draft 2019-09 meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Core201909">
            <summary>
            The Draft 2019-09 Core meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Applicator201909">
            <summary>
            The Draft 2019-09 Applicator meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Validation201909">
            <summary>
            The Draft 2019-09 Validation meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Metadata201909">
            <summary>
            The Draft 2019-09 Metadata meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Format201909">
            <summary>
            The Draft 2019-09 Format meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Content201909">
            <summary>
            The Draft 2019-09 Content meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Draft202012Id">
            <summary>
            The Draft 2020-12 meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Core202012Id">
            <summary>
            The Draft 2020-12 Core meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Unevaluated202012Id">
            <summary>
            The Draft 2020-12 Unevaluated meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Applicator202012Id">
            <summary>
            The Draft 2020-12 Applicator meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Validation202012Id">
            <summary>
            The Draft 2020-12 Validation meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Metadata202012Id">
            <summary>
            The Draft 2020-12 Metadata meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.FormatAnnotation202012Id">
            <summary>
            The Draft 2020-12 Format-Annotation meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.FormatAssertion202012Id">
            <summary>
            The Draft 2020-12 Format-Assertion meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Content202012Id">
            <summary>
            The Draft 2020-12 Content meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Draft202012">
            <summary>
            The Draft 2020-12 meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Core202012">
            <summary>
            The Draft 2020-12 Core meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Unevaluated202012">
            <summary>
            The Draft 2020-12 Unevaluated meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Applicator202012">
            <summary>
            The Draft 2020-12 Applicator meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Validation202012">
            <summary>
            The Draft 2020-12 Validation meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Metadata202012">
            <summary>
            The Draft 2020-12 Metadata meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.FormatAnnotation202012">
            <summary>
            The Draft 2020-12 Format-Annotation meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.FormatAssertion202012">
            <summary>
            The Draft 2020-12 Format-Assertion meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Content202012">
            <summary>
            The Draft 2020-12 Content meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Draft6Id">
            <summary>
            The Draft 6 Core meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Draft6">
            <summary>
            The Draft 6 Core meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Draft7Id">
            <summary>
            The Draft 7 Core meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Draft7">
            <summary>
            The Draft 7 Core meta-schema.
            </summary>
        </member>
        <member name="T:Json.Schema.MinContainsKeyword">
            <summary>
            Handles `minContains`.
            </summary>
        </member>
        <member name="P:Json.Schema.MinContainsKeyword.Value">
            <summary>
            The minimum expected matching items.
            </summary>
        </member>
        <member name="M:Json.Schema.MinContainsKeyword.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.MinContainsKeyword"/>.
            </summary>
            <param name="value">The minimum expected matching items.</param>
        </member>
        <member name="M:Json.Schema.MinContainsKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.MinContainsKeyword.Equals(Json.Schema.MinContainsKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MinContainsKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MinContainsKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.MinimumKeyword">
            <summary>
            Handles `minimum`.
            </summary>
        </member>
        <member name="P:Json.Schema.MinimumKeyword.Value">
            <summary>
            The minimum expected value.
            </summary>
        </member>
        <member name="M:Json.Schema.MinimumKeyword.#ctor(System.Decimal)">
            <summary>
            Creates a new <see cref="T:Json.Schema.MinimumKeyword"/>.
            </summary>
            <param name="value">The minimum expected value.</param>
        </member>
        <member name="M:Json.Schema.MinimumKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.S
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.MinimumKeyword.Equals(Json.Schema.MinimumKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MinimumKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MinimumKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.MinItemsKeyword">
            <summary>
            Handles `minItems`.
            </summary>
        </member>
        <member name="P:Json.Schema.MinItemsKeyword.Value">
            <summary>
            The expected minimum number of items.
            </summary>
        </member>
        <member name="M:Json.Schema.MinItemsKeyword.#ctor(System.UInt32)">
            <summary>
            Create a new <see cref="T:Json.Schema.MinItemsKeyword"/>.
            </summary>
            <param name="value">The expected minimum number of items.</param>
        </member>
        <member name="M:Json.Schema.MinItemsKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.MinItemsKeyword.Equals(Json.Schema.MinItemsKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MinItemsKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MinItemsKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.MinLengthKeyword">
            <summary>
            Handles `minLength`.
            </summary>
        </member>
        <member name="P:Json.Schema.MinLengthKeyword.Value">
            <summary>
            The minimum expected string length.
            </summary>
        </member>
        <member name="M:Json.Schema.MinLengthKeyword.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.MinLengthKeyword"/>.
            </summary>
            <param name="value">The minimum expected string length.</param>
        </member>
        <member name="M:Json.Schema.MinLengthKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.MinLengthKeyword.Equals(Json.Schema.MinLengthKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MinLengthKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MinLengthKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.MinPropertiesKeyword">
            <summary>
            Handles `minProperties`.
            </summary>
        </member>
        <member name="P:Json.Schema.MinPropertiesKeyword.Value">
            <summary>
            The minimum expected number of properties.
            </summary>
        </member>
        <member name="M:Json.Schema.MinPropertiesKeyword.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.MinPropertiesKeyword"/>.
            </summary>
            <param name="value">The minimum expected number of properties.</param>
        </member>
        <member name="M:Json.Schema.MinPropertiesKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.MinPropertiesKeyword.Equals(Json.Schema.MinPropertiesKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MinPropertiesKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MinPropertiesKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.MultipleOfKeyword">
            <summary>
            Handles `multipleOf`.
            </summary>
        </member>
        <member name="P:Json.Schema.MultipleOfKeyword.Value">
            <summary>
            The expected divisor of a value.
            </summary>
        </member>
        <member name="M:Json.Schema.MultipleOfKeyword.#ctor(System.Decimal)">
            <summary>
            Creates a new <see cref="T:Json.Schema.MultipleOfKeyword"/>.
            </summary>
            <param name="value">The expected divisor of a value.</param>
        </member>
        <member name="M:Json.Schema.MultipleOfKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.MultipleOfKeyword.Equals(Json.Schema.MultipleOfKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MultipleOfKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.MultipleOfKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.NotKeyword">
            <summary>
            Handles `not`.
            </summary>
        </member>
        <member name="P:Json.Schema.NotKeyword.Schema">
            <summary>
            The schema to not match.
            </summary>
        </member>
        <member name="M:Json.Schema.NotKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.NotKeyword"/>.
            </summary>
            <param name="value">The schema to not match.</param>
        </member>
        <member name="M:Json.Schema.NotKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.NotKeyword.Equals(Json.Schema.NotKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.NotKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.NotKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.OneOfKeyword">
            <summary>
            Handles `oneOf`.
            </summary>
        </member>
        <member name="P:Json.Schema.OneOfKeyword.Schemas">
            <summary>
            The keywords schema collection.
            </summary>
        </member>
        <member name="M:Json.Schema.OneOfKeyword.#ctor(Json.Schema.JsonSchema[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.OneOfKeyword"/>.
            </summary>
            <param name="values">The keywords schema collection.</param>
        </member>
        <member name="M:Json.Schema.OneOfKeyword.#ctor(System.Collections.Generic.IEnumerable{Json.Schema.JsonSchema})">
            <summary>
            Creates a new <see cref="T:Json.Schema.OneOfKeyword"/>.
            </summary>
            <param name="values">The keywords schema collection.</param>
        </member>
        <member name="M:Json.Schema.OneOfKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.OneOfKeyword.Equals(Json.Schema.OneOfKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.OneOfKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.OneOfKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.OutputFormat">
            <summary>
            Enumerates the available output formats.
            </summary>
        </member>
        <member name="F:Json.Schema.OutputFormat.Flag">
            <summary>
            Indicates that only a single pass/fail node will be returned.
            </summary>
        </member>
        <member name="F:Json.Schema.OutputFormat.Basic">
            <summary>
            Indicates that all nodes will be listed as children of the top node.
            </summary>
        </member>
        <member name="F:Json.Schema.OutputFormat.Detailed">
            <summary>
            Indicates that nodes will be organized in a condensed structure that mimicks the schema.
            </summary>
        </member>
        <member name="F:Json.Schema.OutputFormat.Verbose">
            <summary>
            Indicates that nodes will match the structure of the schema.
            </summary>
        </member>
        <member name="T:Json.Schema.PatternKeyword">
            <summary>
            Handles `pattern`.
            </summary>
        </member>
        <member name="P:Json.Schema.PatternKeyword.Value">
            <summary>
            The regular expression.
            </summary>
        </member>
        <member name="P:Json.Schema.PatternKeyword.InvalidPattern">
            <summary>
            If the pattern is invalid or unsupported by <see cref="T:System.Text.RegularExpressions.Regex"/>, it will appear here.
            </summary>
            <remarks>
            All validations will fail if this is populated.
            </remarks>
        </member>
        <member name="M:Json.Schema.PatternKeyword.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Creates a new <see cref="T:Json.Schema.PatternKeyword"/>.
            </summary>
            <param name="value">The regular expression.</param>
        </member>
        <member name="M:Json.Schema.PatternKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.PatternKeyword.Equals(Json.Schema.PatternKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.PatternKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.PatternKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.PatternPropertiesKeyword">
            <summary>
            Handles `patternProperties`.
            </summary>
        </member>
        <member name="P:Json.Schema.PatternPropertiesKeyword.Patterns">
            <summary>
            The pattern-keyed schemas.
            </summary>
        </member>
        <member name="P:Json.Schema.PatternPropertiesKeyword.InvalidPatterns">
            <summary>
            If any pattern is invalid or unsupported by <see cref="T:System.Text.RegularExpressions.Regex"/>, it will appear here.
            </summary>
            <remarks>
            All validations will fail if this is populated.
            </remarks>
        </member>
        <member name="M:Json.Schema.PatternPropertiesKeyword.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.Text.RegularExpressions.Regex,Json.Schema.JsonSchema})">
            <summary>
            Creates a new <see cref="T:Json.Schema.PatternPropertiesKeyword"/>.
            </summary>
            <param name="values">The pattern-keyed schemas.</param>
        </member>
        <member name="M:Json.Schema.PatternPropertiesKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.PatternPropertiesKeyword.Equals(Json.Schema.PatternPropertiesKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.PatternPropertiesKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.PatternPropertiesKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.PredicateFormat">
            <summary>
            A <see cref="T:Json.Schema.Format"/> that uses a predicate for evaluation.
            </summary>
        </member>
        <member name="T:Json.Schema.PredicateFormat.PredicateWithErrorMessage">
            <summary>
            A predicate that also supplies an `out` error message parameter.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="errorMessage">An error message.</param>
            <returns>`true`.  Override to return another value.</returns>
        </member>
        <member name="M:Json.Schema.PredicateFormat.#ctor(System.String,System.Func{System.Text.Json.Nodes.JsonNode,System.Boolean})">
            <summary>
            Creates a new <see cref="T:Json.Schema.PredicateFormat"/>.
            </summary>
            <param name="key">The format key.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:Json.Schema.PredicateFormat.#ctor(System.String,Json.Schema.PredicateFormat.PredicateWithErrorMessage)">
            <summary>
            Creates a new <see cref="T:Json.Schema.PredicateFormat"/>.
            </summary>
            <param name="key">The format key.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:Json.Schema.PredicateFormat.Validate(System.Text.Json.Nodes.JsonNode,System.String@)">
            <summary>
            Validates an instance against a format and provides an error message.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="errorMessage"></param>
            <returns>`true`.  Override to return another value.</returns>
        </member>
        <member name="T:Json.Schema.PrefixItemsKeyword">
            <summary>
            Handles `items`.
            </summary>
        </member>
        <member name="P:Json.Schema.PrefixItemsKeyword.ArraySchemas">
            <summary>
            The collection of schemas for the "schema array" form.
            </summary>
        </member>
        <member name="M:Json.Schema.PrefixItemsKeyword.#ctor(Json.Schema.JsonSchema[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.PrefixItemsKeyword"/>.
            </summary>
            <param name="values">The collection of schemas for the "schema array" form.</param>
            <remarks>
            Using the `params` constructor to build an array-form `items` keyword with a single schema
            will confuse the compiler.  To achieve this, you'll need to explicitly specify the array.
            </remarks>
        </member>
        <member name="M:Json.Schema.PrefixItemsKeyword.#ctor(System.Collections.Generic.IEnumerable{Json.Schema.JsonSchema})">
            <summary>
            Creates a new <see cref="T:Json.Schema.PrefixItemsKeyword"/>.
            </summary>
            <param name="values">The collection of schemas for the "schema array" form.</param>
        </member>
        <member name="M:Json.Schema.PrefixItemsKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.PrefixItemsKeyword.Equals(Json.Schema.PrefixItemsKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.PrefixItemsKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.PrefixItemsKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.PropertiesKeyword">
            <summary>
            Handles `properties`.
            </summary>
        </member>
        <member name="P:Json.Schema.PropertiesKeyword.Properties">
            <summary>
            The property schemas.
            </summary>
        </member>
        <member name="M:Json.Schema.PropertiesKeyword.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.JsonSchema})">
            <summary>
            Creates a new <see cref="T:Json.Schema.PropertiesKeyword"/>.
            </summary>
            <param name="values">The property schemas.</param>
        </member>
        <member name="M:Json.Schema.PropertiesKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.PropertiesKeyword.Equals(Json.Schema.PropertiesKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.PropertiesKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.PropertiesKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.PropertyNamesKeyword">
            <summary>
            Handles `propertyNames`.
            </summary>
        </member>
        <member name="P:Json.Schema.PropertyNamesKeyword.Schema">
            <summary>
            The schema to match.
            </summary>
        </member>
        <member name="M:Json.Schema.PropertyNamesKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.PropertyNamesKeyword"/>.
            </summary>
            <param name="value">The schema to match.</param>
        </member>
        <member name="M:Json.Schema.PropertyNamesKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.PropertyNamesKeyword.Equals(Json.Schema.PropertyNamesKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.PropertyNamesKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.PropertyNamesKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.ReadOnlyKeyword">
            <summary>
            Handles `readOnly`.
            </summary>
        </member>
        <member name="P:Json.Schema.ReadOnlyKeyword.Value">
            <summary>
            Whether the instance is read-only.
            </summary>
        </member>
        <member name="M:Json.Schema.ReadOnlyKeyword.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ReadOnlyKeyword"/>.
            </summary>
            <param name="value">Whether the instance is read-only.</param>
        </member>
        <member name="M:Json.Schema.ReadOnlyKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.ReadOnlyKeyword.Equals(Json.Schema.ReadOnlyKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ReadOnlyKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ReadOnlyKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.RecursiveAnchorKeyword">
            <summary>
            Handles `$recursiveAnchor`.
            </summary>
        </member>
        <member name="P:Json.Schema.RecursiveAnchorKeyword.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:Json.Schema.RecursiveAnchorKeyword.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.RecursiveAnchorKeyword"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.RecursiveAnchorKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.RecursiveAnchorKeyword.Equals(Json.Schema.RecursiveAnchorKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.RecursiveAnchorKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.RecursiveAnchorKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.RecursiveRefKeyword">
            <summary>
            Handles `$recursiveRef`.
            </summary>
        </member>
        <member name="P:Json.Schema.RecursiveRefKeyword.Reference">
            <summary>
            The URI reference.
            </summary>
        </member>
        <member name="M:Json.Schema.RecursiveRefKeyword.#ctor(System.Uri)">
            <summary>
            Creates a new <see cref="T:Json.Schema.RecursiveRefKeyword"/>.
            </summary>
            <param name="value">The URI.</param>
        </member>
        <member name="M:Json.Schema.RecursiveRefKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.RecursiveRefKeyword.Equals(Json.Schema.RecursiveRefKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.RecursiveRefKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.RecursiveRefKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.RefKeyword">
            <summary>
            Handles `$ref`.
            </summary>
        </member>
        <member name="P:Json.Schema.RefKeyword.Reference">
            <summary>
            The URI reference.
            </summary>
        </member>
        <member name="M:Json.Schema.RefKeyword.#ctor(System.Uri)">
            <summary>
            Creates a new <see cref="T:Json.Schema.RefKeyword"/>.
            </summary>
            <param name="value">The URI reference.</param>
        </member>
        <member name="M:Json.Schema.RefKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.RefKeyword.Equals(Json.Schema.RefKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.RefKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.RefKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.RegexFormat">
            <summary>
            A regular-expression-based format.
            </summary>
        </member>
        <member name="M:Json.Schema.RegexFormat.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.RegexFormat"/>.
            </summary>
            <param name="key">The format key.</param>
            <param name="regex">The regular expression.</param>
        </member>
        <member name="M:Json.Schema.RegexFormat.Validate(System.Text.Json.Nodes.JsonNode,System.String@)">
            <summary>
            Validates an instance against a format and provides an error message.
            </summary>
            <param name="node">The node to validate.</param>
            <param name="errorMessage">An error message.</param>
            <returns>`true` if the value is a match for the regular expression; `false` otherwise.</returns>
        </member>
        <member name="T:Json.Schema.RequiredKeyword">
            <summary>
            Handles `requires`.
            </summary>
        </member>
        <member name="P:Json.Schema.RequiredKeyword.Properties">
            <summary>
            The required properties.
            </summary>
        </member>
        <member name="M:Json.Schema.RequiredKeyword.#ctor(System.String[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.RequiredKeyword"/>.
            </summary>
            <param name="values">The required properties.</param>
        </member>
        <member name="M:Json.Schema.RequiredKeyword.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:Json.Schema.RequiredKeyword"/>.
            </summary>
            <param name="values">The required properties.</param>
        </member>
        <member name="M:Json.Schema.RequiredKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.RequiredKeyword.Equals(Json.Schema.RequiredKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.RequiredKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.RequiredKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.SchemaDraftAttribute">
            <summary>
            Indicates which JSON Schema draft versions are supported by a keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaDraftAttribute.Draft">
            <summary>
            The supported draft.
            </summary>
        </member>
        <member name="M:Json.Schema.SchemaDraftAttribute.#ctor(Json.Schema.Draft)">
            <summary>
            Creates a new <see cref="T:Json.Schema.SchemaDraftAttribute"/>.
            </summary>
            <param name="draft">The supported draft.</param>
        </member>
        <member name="T:Json.Schema.SchemaKeyword">
            <summary>
            Handles `$schema`.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaKeyword.Schema">
            <summary>
            The meta-schema ID.
            </summary>
        </member>
        <member name="M:Json.Schema.SchemaKeyword.#ctor(System.Uri)">
            <summary>
            Creates a new <see cref="T:Json.Schema.SchemaKeyword"/>.
            </summary>
            <param name="schema">The meta-schema ID.</param>
        </member>
        <member name="M:Json.Schema.SchemaKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.SchemaKeyword.Equals(Json.Schema.SchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.SchemaKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.SchemaKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.SchemaKeywordAttribute">
            <summary>
            Indicates the keyword as it appears in a schema.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaKeywordAttribute.Name">
            <summary>
            The keyword name.
            </summary>
        </member>
        <member name="M:Json.Schema.SchemaKeywordAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.SchemaKeywordAttribute"/>.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Json.Schema.SchemaKeywordRegistry">
            <summary>
            Manages which keywords are known by the system.
            </summary>
            <remarks>
            Because the deserialization process relies on keywords being registered,
            this class cannot be an instance class like the other registries in this
            library.  Therefore keywords are registered for all schemas.
            </remarks>
        </member>
        <member name="M:Json.Schema.SchemaKeywordRegistry.Register``1">
            <summary>
            Registers a new keyword type.
            </summary>
            <typeparam name="T">The keyword type.</typeparam>
        </member>
        <member name="M:Json.Schema.SchemaKeywordRegistry.Unregister``1">
            <summary>
            Unregisters a keyword type.
            </summary>
            <typeparam name="T">The keyword type.</typeparam>
        </member>
        <member name="M:Json.Schema.SchemaKeywordRegistry.GetImplementationType(System.String)">
            <summary>
            Gets the implementation for a given keyword name.
            </summary>
            <param name="keyword">The keyword name.</param>
            <returns>The keyword type, if registered; otherwise null.</returns>
        </member>
        <member name="M:Json.Schema.SchemaKeywordRegistry.RegisterNullValue``1(``0)">
            <summary>
            Registers a null-value for a keyword.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nullKeyword"></param>
            <remarks>
            This is important for keywords that accept null, like `default` and `const`.  Without
            this step, the serializer will skip keywords that have nulls.
            </remarks>
        </member>
        <member name="T:Json.Schema.SchemaPriorityAttribute">
            <summary>
            Indicates keyword priority.
            </summary>
            <remarks>
            Keywords are processed in priority order.  This will help process multiple
            keywords in the proper sequence.
            </remarks>
        </member>
        <member name="P:Json.Schema.SchemaPriorityAttribute.Priority">
            <summary>
            The keyword priority.
            </summary>
        </member>
        <member name="M:Json.Schema.SchemaPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.SchemaPriorityAttribute"/>.
            </summary>
            <param name="priority">The keyword priority.</param>
        </member>
        <member name="T:Json.Schema.SchemaRegistry">
            <summary>
            A registry for schemas.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaRegistry.Global">
            <summary>
            The global registry.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaRegistry.Fetch">
            <summary>
            Gets or sets a method to enable automatic download of schemas by `$id` URI.
            </summary>
        </member>
        <member name="M:Json.Schema.SchemaRegistry.Register(System.Uri,Json.Schema.JsonSchema)">
            <summary>
            Registers a schema by URI.
            </summary>
            <param name="uri">The URI ID of the schema..</param>
            <param name="schema">The schema.</param>
        </member>
        <member name="M:Json.Schema.SchemaRegistry.RegisterAnchor(System.Uri,System.String,Json.Schema.JsonSchema)">
            <summary>
            Registers a schema by a named anchor.
            </summary>
            <param name="uri">The URI ID of the schema.</param>
            <param name="anchor">The anchor name.</param>
            <param name="schema">The schema.</param>
        </member>
        <member name="M:Json.Schema.SchemaRegistry.Get(System.Uri,System.String)">
            <summary>
            Gets a schema by URI ID and/or anchor.
            </summary>
            <param name="uri">The URI ID.</param>
            <param name="anchor">(optional) The anchor name.</param>
            <returns>
            The schema, if registered in either this or the global registry;4
            otherwise null.
            </returns>
        </member>
        <member name="T:Json.Schema.SchemaValueType">
            <summary>
            Enumerates the schema value types.
            </summary>
            <remarks>
            This is a flags-enabled enumeration, so values that support multiple
            types can be bit-wise OR'd `|` together.
            </remarks>
        </member>
        <member name="F:Json.Schema.SchemaValueType.Object">
            <summary>
            Indicates the value should be an object.
            </summary>
        </member>
        <member name="F:Json.Schema.SchemaValueType.Array">
            <summary>
            Indicates the value should be an array.
            </summary>
        </member>
        <member name="F:Json.Schema.SchemaValueType.Boolean">
            <summary>
            Indicates the value should be a boolean.
            </summary>
        </member>
        <member name="F:Json.Schema.SchemaValueType.String">
            <summary>
            Indicates the value should be a string.
            </summary>
        </member>
        <member name="F:Json.Schema.SchemaValueType.Number">
            <summary>
            Indicates the value should be a number.
            </summary>
        </member>
        <member name="F:Json.Schema.SchemaValueType.Integer">
            <summary>
            Indicates the value should be an integer.
            </summary>
        </member>
        <member name="F:Json.Schema.SchemaValueType.Null">
            <summary>
            Indicates the value should be null.
            </summary>
        </member>
        <member name="T:Json.Schema.ThenKeyword">
            <summary>
            Handles `then`.
            </summary>
        </member>
        <member name="P:Json.Schema.ThenKeyword.Schema">
            <summary>
            The schema to match.
            </summary>
        </member>
        <member name="M:Json.Schema.ThenKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ThenKeyword"/>.
            </summary>
            <param name="value">The schema to match.</param>
        </member>
        <member name="M:Json.Schema.ThenKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.ThenKeyword.Equals(Json.Schema.ThenKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ThenKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.ThenKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.TitleKeyword">
            <summary>
            Handles `title`.
            </summary>
        </member>
        <member name="P:Json.Schema.TitleKeyword.Value">
            <summary>
            The title.
            </summary>
        </member>
        <member name="M:Json.Schema.TitleKeyword.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.TitleKeyword"/>.
            </summary>
            <param name="value">The title.</param>
        </member>
        <member name="M:Json.Schema.TitleKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.TitleKeyword.Equals(Json.Schema.TitleKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.TitleKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.TitleKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.TypeKeyword">
            <summary>
            Handles `type`.
            </summary>
        </member>
        <member name="P:Json.Schema.TypeKeyword.Type">
            <summary>
            The expected type.
            </summary>
        </member>
        <member name="M:Json.Schema.TypeKeyword.#ctor(Json.Schema.SchemaValueType)">
            <summary>
            Creates a new <see cref="T:Json.Schema.TypeKeyword"/>.
            </summary>
            <param name="type">The expected type.</param>
        </member>
        <member name="M:Json.Schema.TypeKeyword.#ctor(Json.Schema.SchemaValueType[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.TypeKeyword"/>.
            </summary>
            <param name="types">The expected types.</param>
        </member>
        <member name="M:Json.Schema.TypeKeyword.#ctor(System.Collections.Generic.IEnumerable{Json.Schema.SchemaValueType})">
            <summary>
            Creates a new <see cref="T:Json.Schema.TypeKeyword"/>.
            </summary>
            <param name="types">The expected types.</param>
        </member>
        <member name="M:Json.Schema.TypeKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.TypeKeyword.Equals(Json.Schema.TypeKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.TypeKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.TypeKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.UnevaluatedItemsKeyword">
            <summary>
            Handles `unevaluatedItems`.
            </summary>
        </member>
        <member name="P:Json.Schema.UnevaluatedItemsKeyword.Schema">
            <summary>
            The schema by which to validation unevaluated items.
            </summary>
        </member>
        <member name="M:Json.Schema.UnevaluatedItemsKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.UnevaluatedItemsKeyword"/>.
            </summary>
            <param name="value">The schema by which to validation unevaluated items.</param>
        </member>
        <member name="M:Json.Schema.UnevaluatedItemsKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.UnevaluatedItemsKeyword.Equals(Json.Schema.UnevaluatedItemsKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.UnevaluatedItemsKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.UnevaluatedItemsKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.UnevaluatedPropertiesKeyword">
            <summary>
            Handles `unevaluatedProperties`.
            </summary>
        </member>
        <member name="P:Json.Schema.UnevaluatedPropertiesKeyword.Schema">
            <summary>
            The schema by which to validation additional properties.
            </summary>
        </member>
        <member name="M:Json.Schema.UnevaluatedPropertiesKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.UnevaluatedPropertiesKeyword"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Json.Schema.UnevaluatedPropertiesKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.UnevaluatedPropertiesKeyword.Equals(Json.Schema.UnevaluatedPropertiesKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.UnevaluatedPropertiesKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.UnevaluatedPropertiesKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.UniqueItemsKeyword">
            <summary>
            Handles `uniqueItems`.
            </summary>
        </member>
        <member name="P:Json.Schema.UniqueItemsKeyword.Value">
            <summary>
            Whether items should be unique.
            </summary>
        </member>
        <member name="M:Json.Schema.UniqueItemsKeyword.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.UniqueItemsKeyword"/>.
            </summary>
            <param name="value">Whether items should be unique.</param>
        </member>
        <member name="M:Json.Schema.UniqueItemsKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.UniqueItemsKeyword.Equals(Json.Schema.UniqueItemsKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.UniqueItemsKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.UniqueItemsKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.UnknownFormat">
            <summary>
            Represents an unknown format.
            </summary>
        </member>
        <member name="M:Json.Schema.UnknownFormat.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.UnknownFormat"/> instance.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Json.Schema.UnknownFormat.Validate(System.Text.Json.Nodes.JsonNode,System.String@)">
            <summary>
            Validates an instance against a format and provides an error message.
            </summary>
            <param name="node">The node to validate.</param>
            <param name="errorMessage">An error message.</param>
            <returns>`true`.  Override to return another value.</returns>
        </member>
        <member name="T:Json.Schema.UnrecognizedKeyword">
            <summary>
            Handles unrecognized keywords.
            </summary>
        </member>
        <member name="P:Json.Schema.UnrecognizedKeyword.Name">
            <summary>
            The name or key of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.UnrecognizedKeyword.Value">
            <summary>
            The value of the keyword.
            </summary>
        </member>
        <member name="M:Json.Schema.UnrecognizedKeyword.#ctor(System.String,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Creates a new <see cref="T:Json.Schema.UnrecognizedKeyword"/>.
            </summary>
            <param name="name">The name of the keyword.</param>
            <param name="value">The value of the keyword.</param>
        </member>
        <member name="M:Json.Schema.UnrecognizedKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.UnrecognizedKeyword.Equals(Json.Schema.UnrecognizedKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.UnrecognizedKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.UnrecognizedKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.UriExtensions">
            <summary>
            Provides extensions on the <see cref="T:System.Uri"/> type.
            </summary>
        </member>
        <member name="M:Json.Schema.UriExtensions.GetParentUri(System.Uri)">
            <summary>
            Gets the Uri to the parent object.
            </summary>
            <param name="uri">The <see cref="T:System.Uri" /> of a resource, for which the parent Uri should be retrieved.</param>
            <returns>
            The parent <see cref="T:System.Uri" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri" /> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="uri" /> has no parent, it refers to a root resource.</exception>
        </member>
        <member name="T:Json.Schema.ValidationContext">
            <summary>
            Provides a single source of data for validation operations.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationContext.Options">
            <summary>
            The option set for the validation.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationContext.SchemaRoot">
            <summary>
            The root schema.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationContext.SchemaLocation">
            <summary>
            The current subschema location relative to the schema root.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationContext.LocalSchema">
            <summary>
            The current subschema.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationContext.InstanceRoot">
            <summary>
            The instance root.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationContext.InstanceLocation">
            <summary>
            The current instance location relative to the instance root.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationContext.LocalInstance">
            <summary>
            The current instance.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationContext.CurrentUri">
            <summary>
            The current URI, based on `$id` and `$anchor` keywords present in the schema.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationContext.CurrentAnchor">
            <summary>
            The current URI anchor.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationContext.LocalResult">
            <summary>
            The result object for the current validation.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationContext.ApplyOptimizations">
            <summary>
            Whether processing optimizations can be applied (output format = flag).
            </summary>
        </member>
        <member name="M:Json.Schema.ValidationContext.Push(Json.Pointer.JsonPointer@,System.Text.Json.Nodes.JsonNode@,Json.Pointer.JsonPointer@,Json.Schema.JsonSchema@,System.Uri)">
            <summary>
            Pushes the state onto the stack and sets up for a nested layer of validation.
            </summary>
            <param name="instanceLocation">The location within the data instance root.</param>
            <param name="instance">The data instance.</param>
            <param name="subschemaLocation">The location within the schema root.</param>
            <param name="subschema">The subschema.</param>
            <param name="newUri">The URI of the subschema.</param>
        </member>
        <member name="M:Json.Schema.ValidationContext.Pop">
            <summary>
            Pops the state from the stack to return to a previous layer of validation.
            </summary>
        </member>
        <member name="T:Json.Schema.ValidationOptions">
            <summary>
            Allows configuration of the validation process.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationOptions.Default">
            <summary>
            The default settings.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationOptions.ValidateAs">
            <summary>
            Indicates which schema draft to process as.  This will filter the keywords
            of a schema based on their support.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationOptions.ValidateMetaSchema">
            <summary>
            Indicates whether the schema should be validated against its `$schema` value.
            this is not typically necessary.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationOptions.OutputFormat">
            <summary>
            Specifies the output format.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationOptions.SchemaRegistry">
            <summary>
            The local schema registry.  If a schema is not found here, it will
            automatically check the global registry as well.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationOptions.VocabularyRegistry">
            <summary>
            The local vocabulary registry.  If a schema is not found here, it will
            automatically check the global registry as well.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationOptions.DefaultBaseUri">
            <summary>
            Specifies a default URI to be used when a schema is missing a
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationOptions.LogIndentLevel">
            <summary>
            Gets or sets the indent level for the log.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationOptions.Log">
            <summary>
            Gets or sets a log which will output processing information.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationOptions.RequireFormatValidation">
            <summary>
            Specifies whether the `format` keyword should be required to provide
            validation results.  Default is false, which just produces annotations
            for drafts 2019-09 and prior or follows the behavior set forth by the
            format-annotation vocabulary requirement in the `$vocabulary` keyword in
            a meta-schema declaring draft 2020-12.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationOptions.OnlyKnownFormats">
            <summary>
            Specifies whether the `format` keyword should fail validations for
            unknown formats.  Default is false.
            </summary>
            <remarks>
            This option is applied whether `format` is using annotation or
            assertion behavior.
            </remarks>
        </member>
        <member name="M:Json.Schema.ValidationOptions.#ctor">
            <summary>
            Create a new instance of the <see cref="T:Json.Schema.ValidationOptions"/> class.
            </summary>
        </member>
        <member name="T:Json.Schema.ValidationResults">
            <summary>
            The results object for validations.
            </summary>
        </member>
        <member name="T:Json.Schema.ValidationResults.ContextConsolidator">
            <summary>
            Consolidates annotations from multiple child results onto a single parent result.
            Generally, a keyword will define how it handles its own consolidation.  This action
            must be registered on startup.
            </summary>
            <param name="results">The validation results.</param>
        </member>
        <member name="P:Json.Schema.ValidationResults.IsValid">
            <summary>
            Indicates whether the validation passed or failed.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationResults.Message">
            <summary>
            The error message, if any.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationResults.SchemaLocation">
            <summary>
            The schema location that generated this node.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationResults.InstanceLocation">
            <summary>
            The instance location that was processed.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationResults.AbsoluteSchemaLocation">
            <summary>
            The absolute schema location.  Only available if the schema had an absolute URI ID.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationResults.NestedResults">
            <summary>
            The collection of nested results.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationResults.HasNestedResults">
            <summary>
            Gets whether there are nested results.
            </summary>
            <remarks>
            Because <see cref="P:Json.Schema.ValidationResults.NestedResults"/> is lazily loaded, this property allows the check without
            the side effect of allocating a list object.
            </remarks>
        </member>
        <member name="P:Json.Schema.ValidationResults.Annotations">
            <summary>
            The collection of annotations from this node.
            </summary>
        </member>
        <member name="P:Json.Schema.ValidationResults.HasAnnotations">
            <summary>
            Gets whether there are annotation.
            </summary>
            <remarks>
            Because <see cref="P:Json.Schema.ValidationResults.Annotations"/> is lazily loaded, this property allows the check without
            the side effect of allocating a list object.
            </remarks>
        </member>
        <member name="P:Json.Schema.ValidationResults.Parent">
            <summary>
            Gets the parent result.
            </summary>
        </member>
        <member name="M:Json.Schema.ValidationResults.ToDetailed">
            <summary>
            Transforms the results to the `details` format.
            </summary>
        </member>
        <member name="M:Json.Schema.ValidationResults.ToBasic">
            <summary>
            Transforms the results to the `basic` format.
            </summary>
        </member>
        <member name="M:Json.Schema.ValidationResults.ToFlag">
            <summary>
            Transforms the results to the `flag` format.
            </summary>
        </member>
        <member name="M:Json.Schema.ValidationResults.ConsolidateAnnotations">
            <summary>
            Invokes all consolidation actions.  Should be called at the end of processing an applicator keyword.
            </summary>
        </member>
        <member name="M:Json.Schema.ValidationResults.SetAnnotation(System.String,System.Object)">
            <summary>
            Sets an annotation.
            </summary>
            <param name="owner">The annotation key.  Typically the name of the keyword.</param>
            <param name="value">The annotation value.</param>
        </member>
        <member name="M:Json.Schema.ValidationResults.RegisterConsolidationMethod(Json.Schema.ValidationResults.ContextConsolidator)">
            <summary>
            Registers a consolidation action.
            </summary>
            <param name="consolidateAnnotations">The action.</param>
        </member>
        <member name="M:Json.Schema.ValidationResults.TryGetAnnotation(System.String)">
            <summary>
            Tries to get an annotation.
            </summary>
            <param name="key">The annotation key.</param>
            <returns>The annotation or null.</returns>
        </member>
        <member name="M:Json.Schema.ValidationResults.GetAllAnnotations``1(System.String)">
            <summary>
            Gets all annotations of a particular data type for the current validation level.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <param name="key">The key under which the annotation is stored.  Typically a keyword.</param>
            <returns>The set of all annotations for the current validation level.</returns>
        </member>
        <member name="M:Json.Schema.ValidationResults.Pass">
            <summary>
            Marks the result as valid.
            </summary>
        </member>
        <member name="M:Json.Schema.ValidationResults.Fail(System.String)">
            <summary>
            Marks the result as invalid.
            </summary>
            <param name="message">(optional) An error message.</param>
            <remarks>
            For better support for customization, consider using the overload that takes parameters.
            </remarks>
        </member>
        <member name="M:Json.Schema.ValidationResults.Fail(System.String,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Marks the result as invalid.
            </summary>
            <param name="message">The error message.</param>
            <param name="parameters">Parameters to replace in the message.</param>
        </member>
        <member name="T:Json.Schema.Vocabularies">
            <summary>
            Declares the vocabularies of the supported drafts.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Core201909Id">
            <summary>
            The Draft 2019-09 Core vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Applicator201909Id">
            <summary>
            The Draft 2019-09 Applicator vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Validation201909Id">
            <summary>
            The Draft 2019-09 Validation vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Metadata201909Id">
            <summary>
            The Draft 2019-09 Metadata vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Format201909Id">
            <summary>
            The Draft 2019-09 Format vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Content201909Id">
            <summary>
            The Draft 2019-09 Content vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Core201909">
            <summary>
            The Draft 2019-09 Core vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Applicator201909">
            <summary>
            The Draft 2019-09 Applicator vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Validation201909">
            <summary>
            The Draft 2019-09 Validation vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Metadata201909">
            <summary>
            The Draft 2019-09 Metadata vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Format201909">
            <summary>
            The Draft 2019-09 Format vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Content201909">
            <summary>
            The Draft 2019-09 Content vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Core202012Id">
            <summary>
            The Draft 2020-12 Core vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Unevaluated202012Id">
            <summary>
            The Draft 2020-12 Unevaluated vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Applicator202012Id">
            <summary>
            The Draft 2020-12 Applicator vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Validation202012Id">
            <summary>
            The Draft 2020-12 Validation vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Metadata202012Id">
            <summary>
            The Draft 2020-12 Metadata vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.FormatAnnotation202012Id">
            <summary>
            The Draft 2020-12 Format vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.FormatAssertion202012Id">
            <summary>
            The Draft 2020-12 Format vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Content202012Id">
            <summary>
            The Draft 2020-12 Content vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Core202012">
            <summary>
            The Draft 2020-12 Core vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Unevaluated202012">
            <summary>
            The Draft 2020-12 Unevaluated vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Applicator202012">
            <summary>
            The Draft 2020-12 Applicator vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Validation202012">
            <summary>
            The Draft 2020-12 Validation vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Metadata202012">
            <summary>
            The Draft 2020-12 Metadata vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.FormatAnnotation202012">
            <summary>
            The Draft 2020-12 Format-Annotation vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.FormatAssertion202012">
            <summary>
            The Draft 2020-12 Format-Assertion vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Content202012">
            <summary>
            The Draft 2020-12 Content vocabulary.
            </summary>
        </member>
        <member name="T:Json.Schema.Vocabulary">
            <summary>
            Represents a Draft 2019-09 and later vocabulary.
            </summary>
        </member>
        <member name="P:Json.Schema.Vocabulary.Id">
            <summary>
            The vocabulary ID.
            </summary>
        </member>
        <member name="P:Json.Schema.Vocabulary.Keywords">
            <summary>
            The types of the keywords that are defined by the vocabulary.
            </summary>
        </member>
        <member name="M:Json.Schema.Vocabulary.#ctor(System.String,System.Type[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.Vocabulary"/>.
            </summary>
            <param name="id">The vocabulary ID.</param>
            <param name="keywords">The types of the keywords that are defined by the vocabulary.</param>
        </member>
        <member name="M:Json.Schema.Vocabulary.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new <see cref="T:Json.Schema.Vocabulary"/>.
            </summary>
            <param name="id">The vocabulary ID.</param>
            <param name="keywords">The types of the keywords that are defined by the vocabulary.</param>
        </member>
        <member name="T:Json.Schema.VocabularyAttribute">
            <summary>
            Indicates the ID of the vocabulary a keyword belongs to.
            </summary>
        </member>
        <member name="P:Json.Schema.VocabularyAttribute.Id">
            <summary>
            The vocabulary ID.
            </summary>
        </member>
        <member name="M:Json.Schema.VocabularyAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.VocabularyAttribute"/>.
            </summary>
            <param name="id">The vocabulary ID.</param>
        </member>
        <member name="T:Json.Schema.VocabularyKeyword">
            <summary>
            Handles `$vocabulary`.
            </summary>
        </member>
        <member name="P:Json.Schema.VocabularyKeyword.Vocabulary">
            <summary>
            The collection of vocabulary requirements.
            </summary>
        </member>
        <member name="M:Json.Schema.VocabularyKeyword.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.Uri,System.Boolean})">
            <summary>
            Creates a new <see cref="T:Json.Schema.VocabularyKeyword"/>.
            </summary>
            <param name="values">The collection of vocabulary requirements.</param>
        </member>
        <member name="M:Json.Schema.VocabularyKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.VocabularyKeyword.Equals(Json.Schema.VocabularyKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.VocabularyKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.VocabularyKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.VocabularyRegistry">
            <summary>
            A registry for vocabularies.
            </summary>
        </member>
        <member name="P:Json.Schema.VocabularyRegistry.Global">
            <summary>
            The global registry.
            </summary>
        </member>
        <member name="M:Json.Schema.VocabularyRegistry.Register(Json.Schema.Vocabulary)">
            <summary>
            Registers a vocabulary.  This does not register the vocabulary's
            keywords.  This must be done separately.
            </summary>
            <param name="vocabulary"></param>
        </member>
        <member name="M:Json.Schema.VocabularyRegistry.IsKnown(System.Uri)">
            <summary>
            Indicates whether a vocabulary is known by URI ID and/or anchor.
            </summary>
            <param name="vocabularyId">The URI ID.</param>
            <returns>
            `true`, if registered in either this or the global registry;
            `false` otherwise.
            </returns>
        </member>
        <member name="M:Json.Schema.VocabularyRegistry.Get(System.Uri)">
            <summary>
            Retrieves the vocabulary associated with the URI ID, if known.
            </summary>
            <param name="vocabularyId">The URI ID.</param>
            <returns>The vocabulary, if known; otherwise null.</returns>
        </member>
        <member name="T:Json.Schema.WriteOnlyKeyword">
            <summary>
            Handles `writeOnly`.
            </summary>
        </member>
        <member name="P:Json.Schema.WriteOnlyKeyword.Value">
            <summary>
            Whether the instance is read-only.
            </summary>
        </member>
        <member name="M:Json.Schema.WriteOnlyKeyword.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.WriteOnlyKeyword"/>.
            </summary>
            <param name="value">Whether the instance is read-only.</param>
        </member>
        <member name="M:Json.Schema.WriteOnlyKeyword.Validate(Json.Schema.ValidationContext)">
            <summary>
            Provides validation for the keyword.
            </summary>
            <param name="context">Contextual details for the validation process.</param>
        </member>
        <member name="M:Json.Schema.WriteOnlyKeyword.Equals(Json.Schema.WriteOnlyKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.WriteOnlyKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.WriteOnlyKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
    </members>
</doc>
